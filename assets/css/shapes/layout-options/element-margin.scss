// Only use weight of margin, so we can do calculations on them
@mixin element-margin($margin) {
	&.background {
		padding-bottom: var(--margin-#{$margin});

		&+*:not(.background) {
			padding-top: var(--margin-#{$margin});
		}
		
		&+.background { // gives all background elements the right spacing
			padding-top: var(--margin-#{$margin});
			margin-top: calc(var(--margin-#{$margin}) * -1) !important;
		}
	}

	&:not(.background) {

		&+*.background {
			margin-top: var(--margin-#{$margin});
			padding-top: var(--margin-#{$margin});
		}

		&+*:not(.background) {
			margin-top: var(--margin-#{$margin});
		}
	}
}

// We don't want random margins in Layoutmode
body:not(.cmt-layout) {
	.element-margin {
		&--none+* {
			margin-top: 0 !important;
		}

		&--small {
			@include element-margin(400);
		}

		&--default {
			@include element-margin(500);
		}
		
		&--medium {
			@include element-margin(600);
		}
		
		&--large {
			@include element-margin(800);
		}
		
		&--huge {
			@include element-margin(900);
		}
	}
	

	#main .element-margin--default { // using id to raise specificity
		&.element-headline+*[class~='element'] {
			padding-top: var(--vertical-unit);
			margin-top: 0;
		}
	
		&.element-paragraph+.element-paragraph {
			padding-top: var(--vertical-unit);
			margin-top: 0;
		}
		
		&.element-paragraph+.element-html {
			padding-top: var(--vertical-unit);
			margin-top: 0;
		}

		&:not(.background) + .footer-margin {
			margin-top: var(--margin-800);
		}

		&.background + .footer-margin {
			padding-top: 0;
			margin-top: 0;
		}
	}
}

.footer-margin {
	opacity: 0;
	height: 0;
	background-color: none;
	border: none;
}

// fallback for Pageless Actions or other
*:not(.element)+.footer-margin {
	margin-top: var(--margin-800);
}