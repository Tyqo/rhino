{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["/**\n * app/js/main.js\n *\n * Main javascript file\n *\n * @author Carsten Coull <carsten.coull@swu.de>\n * @package vt-dispo\n * @version 2023-10-25\n */\n\n/**\n * Import modules, modules are stored in `app/js/modules/`\n */\nimport ThemeSwitcher from \"/rhino/js/modules/theme-switcher.js\";\nimport Modal from \"/rhino/js/modules/modal.js\";\nimport Menu from \"/rhino/js/modules/menu.js\";\n\n/**\n * Application main class\n */\nclass MAIN {\n\t/**\n\t * Constructor\n\t */\n\tconstructor() {\n\t\tthis.debug = false;\n\n\t\tdocument.addEventListener(\"DOMContentLoaded\", () => this.init());\n\t\twindow.onload = () => this.main();\n\t}\n\n\t/**\n\t * init\n\t * Called on DOMContentLoaded, so a good place to setup things not dependend\n\t * on the page finished rendering\n\t */\n\tinit() {\n\t\tif (this.debug) {\n\t\t\tconsole.debug(\"MAIN::init\");\n\t\t}\n\t\t\n\t\t// Init Moduls that need to start before the page is visible here:\n\t\tthis.ThemeSwitcher = new ThemeSwitcher(this);\n\t\t\n\t\tdocument.body.classList.add(\"page-has-loaded\");\n\t\twindow.addEventListener(\"resize\", () => this.throttle(this.resizeHandler), { passive: true });\n\t\twindow.addEventListener(\"scroll\", () => this.throttle(this.scrollHandler), { passive: true });\n\t}\n\n\t/**\n\t * Main method\n\t * Put main business logic here\n\t *\n\t * @return void\n\t */\n\tmain() {\n\t\tthis.pageInit();\n\t\tif (this.debug) {\n\t\t\tconsole.debug(\"MAIN::main\");\n\t\t}\n\n\t\t// Init Moduls here:\n\t\tthis.ThemeSwitcher.init();\n\t\tthis.Modal = new Modal(this);\n\t\tthis.Menu = new Menu(this);\n\n\t\tdocument.body.classList.add(\"page-has-rendered\");\n\t}\n\n\n\t/**\n\t * pageInit\n\t * Called on window.load, i.e. when the page and all assets have been\n\t * loaded completely and the page has rendered\n\t *\n\t * @return void\n\t */\n\tpageInit() {\n\t\tif (this.debug) {\n\t\t\tconsole.debug(\"MAIN::pageInit\");\n\t\t}\n\n\t\t// Let's see if we have a header element and get it's height (for\n\t\t// detecting scroll past header, see `App.scrollHandler`\n\t\tthis.header = document.querySelector(\"header\");\n\t\tif (this.header) {\n\t\t\tlet rect = this.header.getBoundingClientRect();\n\t\t\tthis.headerBottom = rect.top + rect.height;\n\t\t}\n\t}\n\n\t/*\n\t * Debounced / throttled scroll handler. Put your scroll-related stuff here!\n\t * @return void\n\t */\n\tscrollHandler() {\n\t\tlet y = window.scrollY;\n\n\t\tif (this.debug) {\n\t\t\tconsole.debug(`Scroll position: ${y}`);\n\t\t}\n\n\t\t// Set classes on body depending on how far the page has scrolled\n\t\tdocument.body.classList.toggle(\"has-scrolled\", y > 0);\n\t\tdocument.body.classList.toggle(\"has-scrolled-a-bit\", y > 30);\n\t\tdocument.body.classList.toggle(\n\t\t\t\"has-scrolled-past-header\",\n\t\t\ty > this.headerBottom\n\t\t);\n\t\tdocument.body.classList.toggle(\n\t\t\t\"has-scrolled-100vh\",\n\t\t\ty > window.innerHeight\n\t\t);\n\n\t\t// Todo: Scroll direction!\n\t\tif (this.lastScrollPosition) {\n\t\t\tdocument.body.classList.toggle(\n\t\t\t\t\"has-scrolled-up\",\n\t\t\t\ty < this.lastScrollPosition\n\t\t\t);\n\n\t\t\tdocument.body.classList.toggle(\n\t\t\t\t\"has-scrolled-down\",\n\t\t\t\ty > this.lastScrollPosition\n\t\t\t);\n\t\t}\n\t\tthis.lastScrollPosition = y;\n\n\t\t// Extend here …\n\t}\n\n\t/**\n\t * Debounced / throttled scroll handler. Put your resize-related stuff here!\n\t *\n\t * @return void\n\t */\n\tresizeHandler() {\n\t\tlet width = window.innerWidth,\n\t\t\theight = window.innerHeight;\n\n\t\tif (this.debug) {\n\t\t\tconsole.debug(`Window has been resized to ${width}, ${height}`);\n\t\t}\n\n\t\t// Set custom properties\n\t\tdocument.body.style.setProperty(\"--window-width\", `${width}px`);\n\t\tdocument.body.style.setProperty(\"--window-height\", `${height}px`);\n\n\t\t// Extend here …\n\t}\n\n\t/**\n\t * Throttler method\n\t *\n\t * @param callable: Handler to be called on throttled scroll event\n\t * @return void\n\t */\n\tthrottle(handler) {\n\t\tthis.ticking = false;\n\n\t\tif (!this.ticking) {\n\t\t\twindow.requestAnimationFrame(() => {\n\t\t\t\thandler.call(this);\n\t\t\t\tthis.ticking = false;\n\t\t\t});\n\t\t\tthis.ticking = true;\n\t\t}\n\t}\n\n\t/**\n\t * execute if click/interaktion is outside of the Selector\n\t *\n\t * @param selector: Element selector (e.g. class, id) to watch for\n\t * @param callback: function to execute if interaktion is outside of the Selector\n\t *\n\t * Example:\n\t * this.app.onOutsideClick('#main-menu', this.closeMenu);\n\t */\n\tonOutsideClick(selector, callback) {\n\t\tdocument.addEventListener(\"click\", (event) => {\n\t\t\tvar target = event.target.parentNode.closest(selector);\n\t\t\tif (target == null && document.querySelector(selector) != event.target) {\n\t\t\t\tcallback(event, target);\n\t\t\t}\n\t\t});\n\t}\n}\n\nnew MAIN();\n"],"file":"main.js"}