{"version":3,"names":[],"mappings":"","sources":["components.js"],"sourcesContent":["// import DragDrop from \"./dragdrop.js\";\nimport Editor from \"./editor.js\";\nimport Modal from \"./modal.js\";\n\n/**\n * \n */\nexport default class LayoutComponents {\n\t/**\n\t * \n\t * @param {*} main \n\t */\n\tconstructor(main) {\n\t\tthis.main = main;\n\n\t\tif (this.main.debug) {\n\t\t\tconsole.debug(\"LayoutComponents::const\");\n\t\t}\n\n\t\tthis.Config = {\n\t\t\tnewButtonSelector: 'button[name=new-component]',\n\t\t\tlayoutContainerSelector: '.layout-container, .layout-slot',\n\t\t\telementSelector: '.layout-element'\n\t\t}\n\n\t\tthis.Actions = {\n\t\t\tnew: \t'/rhino/components/new/',\n\t\t\tupdate: '/rhino/components/update/',\n\t\t\tchange: '/rhino/components/change/',\n\t\t\tdelete: '/rhino/components/delete/',\n\t\t}\n\n\t\tthis.containers = {};\n\n\t\tlet layoutContainers = document.querySelector(this.Config.layoutContainerSelector);\n\t\t\n\t\t// this.DragDrop = new DragDrop();\n\t\t\t\n\t\tif (layoutContainers) {\n\t\t\tthis.setup(document);\n\t\t}\n\t}\n\t\n\t/**\n\t * setup\n\t */\n\tsetup(parentNode) {\n\t\t// this.DragDrop.loadElements(\n\t\t// \tthis.elements,\n\t\t// \t(element, position) => this.setPosition(element, position)\n\t\t// );\n\t\tthis.pageId = this.main.getPageId();\n\n\t\tthis.newButtons = parentNode.querySelectorAll(this.Config.newButtonSelector);\n\t\tthis.elements = parentNode.querySelectorAll(this.Config.elementSelector);\n\t\tthis.layoutContainers = parentNode.querySelectorAll(this.Config.layoutContainerSelector);\n\n\t\tconsole.log(this.newButtons.length);\n\n\t\tthis.layoutContainers.forEach(container => {\n\t\t\tthis.containers[container.getAttribute('name')] = container;\n\t\t});\n\n\t\tthis.newButtons.forEach(newButton => {\n\t\t\tnewButton.addEventListener('click', () => {\n\t\t\t\tthis.newComponent(newButton.value);\n\t\t\t});\n\t\t});\n\n\t\tthis.elements.forEach(nodeElement => {\n\t\t\tnew Component(this, nodeElement);\n\t\t});\n\t}\n\n\t/**\n\t * postFetch\n\t * \n\t * @param {*} url \n\t * @param {*} data \n\t * @returns \n\t */\n\tasync postFetch(url, data = '') {\n\t\treturn fetch(url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'X-CSRF-Token': this.main.getToken(),\n\t\t\t\t'X-Requested-With': 'XMLHttpRequest'\n\t\t\t},\n\t\t\tcredentials: \"same-origin\",\n\t\t\tbody: JSON.stringify(data)\n\t\t})\n\t}\n\n\t/**\n\t * newComponent\n\t * \n\t * @param {*} url \n\t * @param {*} name \n\t */\n\tnewComponent(region) {\n\t\tlet container = this.containers[region];\n\t\t\n\t\tthis.postFetch(this.Actions.new, {\n\t\t\tregion: region,\n\t\t\tparentId: container.getAttribute('value')\n\t\t}).then((response) => response.text())\n\t\t\t.then((html) => {\n\t\t\t\tlet component = new Component(this, html);\n\t\t\t\tcontainer.appendChild(component.element);\n\n\t\t\t\tthis.setup(component.element);\n\t\t\t});\n\t}\n\n\t/**\n\t * updateContent\n\t * \n\t * @param {*} action \n\t * @param {*} url \n\t * @param {*} element \n\t * @param {*} data \n\t */\n\tasync updateContent(action, url, element, data = {}) {\n\t\tif (action == 'save') {\n\t\t\tdata = await element.getContent();\n\t\t}\n\n\t\tthis.postFetch(url, data)\n\t\t\t.then((response) => response.text())\n\t\t\t.then((html) => {\n\t\t\t\tif (action == 'update') {\n\t\t\t\t\tlet elementNew = new Element(this, html);\n\t\t\t\t\telement.container.insertBefore(elementNew.nodeElement, element.nodeElement);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (action == 'delete' || action == 'update') {\n\t\t\t\t\telement.destroy();\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * setPosition (Depricated)\n\t * \n\t * @param {*} element \n\t * @param {*} position \n\t */\n\tsetPosition(element, position) {\n\t\tlet id = element.id.replace('element-', '');\n\t\tlet url = '/rhino/contents/update/' + id\n\n\t\tif (position < 0) {\n\t\t\tposition = 0;\n\t\t}\n\n\t\tthis.updateContent('move', url, element, { position: position });\n\t}\n}\n\n\n/**\n * Component\n * \n */\nclass Component {\n\t/**\n\t * \n\t * @param {*} handler \n\t * @param {*} element \n\t */\n\tconstructor(handler, element = null) {\n\t\tthis.Handler = handler;\n\n\t\tthis.fields = [\n\t\t\t'template_id',\n\t\t\t'content',\n\t\t\t// 'media',\n\t\t];\n\n\t\tif (typeof element == \"object\" && element.nodeType) {\n\t\t\tthis.element = element;\n\t\t} else if (typeof element == \"string\") {\n\t\t\tthis.element = this.createElement(element);\n\t\t}\n\n\t\tthis.content = this.element.querySelector('[name=content]');\n\t\tthis.select = this.element.querySelector('[name=template_id]');\n\t\t// this.media = this.element.querySelector('[name=media]');\n\n\t\tthis.id = this.element.dataset.id;\n\t\tthis.region = this.element.dataset.region;\n\t\t// this.position = this.element.dataset.position;\n\n\t\t// this.elementHandler.DragDrop.addElement(this.nodeElement);\n\n\t\tthis.initialize();\n\t}\n\n\t/**\n\t * initialize\n\t * \n\t */\n\tinitialize() {\n\t\tthis.saveButton = this.element.querySelector('[name=save]');\n\t\tthis.deleteButton = this.element.querySelector('[name=delete]');\n\t\tthis.toggleButton = this.element.querySelector('[name=toggle]');\n\t\tthis.moveHandle = this.element.querySelector('[name=move]');\n\n\t\t// this.select.addEventListener('change', () => this.elementHandler.updateContent(\n\t\t// \t'update',\n\t\t// \tthis.select.dataset.url,\n\t\t// \tthis,\n\t\t// \t{ element_id: this.select.value },\n\t\t// ));\n\t\t\n\t\tthis.saveButton.addEventListener('click', () => this.update());\n\t\tthis.deleteButton.addEventListener('click', () => this.delete());\n\t\tthis.select.addEventListener('change', () => this.change({\n\t\t\ttemplate_id: this.select.value\n\t\t}));\n\n\t\t// this.toggleButton.addEventListener('change', () => this.elementHandler.updateContent(\n\t\t// \t'update',\n\t\t// \tthis.toggleButton.dataset.url,\n\t\t// \tthis,\n\t\t// \t{ active: !this.toggleButton.value }\n\t\t// ));\n\n\t\t// this.moveHandle.addEventListener('mouseover', () => this.nodeElement.draggable = true);\n\t\t// this.moveHandle.addEventListener('mouseout', () => this.nodeElement.draggable = false);\n\n\t\tthis.element.addEventListener('keydown', (e) => {\n\t\t\tif (e.ctrlKey && e.keyCode === 83) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.update('save');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\tthis.addEditor();\n\t\tthis.addMedia();\n\t}\n\n\n\tasync update() {\n\t\tlet data = await this.getContent();\n\t\tdata.id = this.id;\n\n\t\tthis.Handler.postFetch(this.Handler.Actions.update, data);\n\t}\n\n\tasync change(data) {\n\t\tdata.id = this.id;\n\n\t\tthis.Handler.postFetch(this.Handler.Actions.change, data)\n\t\t\t.then((response) => response.text())\n\t\t\t.then((html) => {\n\t\t\t\tlet elementNew = new Component(this.Handler, html);\n\t\t\t\tthis.element.parentElement.insertBefore(elementNew.element, this.element);\n\t\t\t\tthis.destroy();\n\n\t\t\t\tthis.Handler.setup(elementNew.element);\n\t\t\t});\n\t}\n\n\tasync delete() {\n\t\tthis.Handler.postFetch(this.Handler.Actions.delete, {\n\t\t\tid: this.id\n\t\t}).then((response) => response.text())\n\t\t\t.then((html) => {\n\t\t\t\tthis.destroy();\n\t\t\t});\n\t}\n\n\t/**\n\t * createElement\n\t * \n\t * @param {*} html \n\t * @returns \n\t */\n\tcreateElement(html) {\n\t\tlet template = document.createElement('template');\n\t\ttemplate.innerHTML = html.trim();\n\n\t\tlet element = template.content.firstChild;\n\t\treturn element;\n\t}\n\n\t/**\n\t * addEditor\n\t * \n\t * @returns \n\t */\n\taddEditor() {\n\t\tlet editorElement = this.element.querySelector('.editor');\n\t\t\n\t\tif (!editorElement) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tlet parentElement = editorElement.closest('.layout-element');\n\t\tif (this.element.dataset.id != parentElement.dataset.id) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.editor = new Editor(editorElement, this.content.value);\n\t}\n\n\t/**\n\t * addMedia\n\t * \n\t * @returns \n\t */\n\taddMedia() {\n\t\tlet mediaButton = this.element.querySelector('[name=mediaButton]');\n\n\t\tif (!mediaButton) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.Modal) {\n\t\t\tthis.Modal = new Modal(this);\n\t\t}\n\n\t\tlet modal = this.Modal.newModal(mediaButton, false);\n\t\tthis.Modal.addQuery(modal);\n\t\t\n\t\tmediaButton.addEventListener('click', () => {\n\t\t\tfetch(mediaButton.value)\n\t\t\t\t.then(response => response.text())\n\t\t\t\t.then(text => {\n\t\t\t\t\tthis.Modal.addContent(modal, text);\n\t\t\t\t\tthis.Modal.openModal(modal);\n\t\t\t\t});\n\t\t});\n\n\t\tmodal.addEventListener('confirm', (e) => {\n\t\t\tlet selected = modal.querySelector('input[type=radio]:checked');\n\n\t\t\tthis.media.value = selected.value;\n\n\t\t\tconsole.log(this.media.value);\n\n\t\t\tthis.elementHandler.updateContent(\n\t\t\t\t'update',\n\t\t\t\tthis.select.dataset.url,\n\t\t\t\tthis,\n\t\t\t\t{ media: this.media.value },\n\t\t\t);\n\t\t});\n\n\t\tmodal.addEventListener('close', (e) => {\n\t\t\tthis.Modal.reset(modal);\n\t\t});\n\t}\n\n\t/**\n\t * get\n\t * \n\t * @returns \n\t */\n\tasync getContent() {\n\t\tif (this.editor) {\n\t\t\tlet editorData = await this.editor.save();\n\t\t\tthis.content.value = JSON.stringify(editorData);\n\t\t\tthis.content.innerHTML = this.content.value;\n\t\t}\n\n\t\tlet data = {};\n\n\t\tthis.fields.forEach(field => {\n\t\t\tlet node = this.element.querySelector('[name=' + field + ']');\n\t\t\tif (node) {\n\t\t\t\tdata[field] = node.value;\n\t\t\t}\n\t\t});\n\n\t\treturn data;\n\t}\n\n\t/**\n\t * destroy\n\t */\n\tdestroy() {\n\t\tif (this.editor) {\n\t\t\tthis.editor.destroy();\n\t\t}\n\t\tthis.element.remove();\n\t}\n}"],"file":"components.js"}