{"version":3,"names":[],"mappings":"","sources":["dragdrop.js"],"sourcesContent":["export default class DragDrop {\n\tloadElements(elements, callback) {\n\t\tif (elements.length > 0) {\n\t\t\tthis.dropZone = elements[0].parentNode;\n\t\t\tthis.callback = callback;\n\t\t}\n\n\t\telements.forEach(element => {\n\t\t\telement.addEventListener('dragstart', (event) => this.dragStart(event.target));\n\t\t\telement.addEventListener('dragover', (event) => this.dragOver(event.target));\n\t\t\telement.addEventListener('dragend', (event) => this.dropped(event.target));\n\t\t});\n\t}\n\n\tdragStart(element) {\n\t\tthis.draggedElement = element;\n\t}\n\n\tdragOver(element) {\n\t\tif (this.draggedElement == null || element == this.draggedElement) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tlet current = this.getPosition(element);\n\t\tlet dragged = this.getPosition(this.draggedElement);\n\n\t\tif (current == null || dragged == null) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (current < dragged) {\n\t\t\telement.before(this.draggedElement);\n\t\t} else {\n\t\t\telement.after(this.draggedElement);\n\t\t}\n\t}\n\n\tgetPosition(element) {\n\t\tlet position = null;\n\n\t\tfor (let index = 0; index < this.dropZone.children.length; index++) {\n\t\t\tif (this.dropZone.children[index] == element) {\n\t\t\t\tposition = index;\n\t\t\t}\n\t\t}\n\n\t\treturn position;\n\t}\n\n\tdropped(element) {\n\t\tthis.dragedElement = null;\n\t\tthis.callback(element, this.getPosition(element));\n\t}\n}\n"],"file":"dragdrop.js"}