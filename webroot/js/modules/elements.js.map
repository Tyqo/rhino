{"version":3,"names":[],"mappings":"","sources":["elements.js"],"sourcesContent":["import DragDrop from \"./dragdrop.js\";\nimport Editor from \"./editor.js\";\n\nexport default class LayoutElements {\n\tconstructor(main) {\n\t\tthis.main = main;\n\n\t\tif (this.main.debug) {\n\t\t\tconsole.debug(\"LayoutElements::const\");\n\t\t}\n\n\t\tthis.DragDrop = new DragDrop();\n\t\tthis.elements = document.querySelectorAll('.layout-element');\n\t\tthis.DragDrop.loadElements(this.elements, this.setPosition);\n\t}\n\n\tsetModal(modal) {\n\t\tmodal.addEventListener('modalOpen', (event) => this.initForm(event));\n\t\tmodal.addEventListener('modalClosed', (event) => this.onDispatch(event));\n\t}\n\n\tinitForm(event) {\n\t\tif (this.main.debug) {\n\t\t\tconsole.debug(\"LayoutElements::initForm\");\n\t\t}\n\t\tthis.modal = event.detail;\n\t\tthis.modalForm = this.modal.modalMain.querySelector('form');\n\t\tlet switcher = document.getElementById('element-id');\n\t\tthis.container = document.getElementById('elements-container');\n\t\tthis.fetchElement(switcher.value);\n\t\t\n\t\tswitcher.addEventListener('change', (event) => {\n\t\t\tthis.fetchElement(event.target.value);\n\t\t})\n\n\t\tthis.modalForm.addEventListener('submit', (event) => {\n\t\t\tevent.preventDefault();\n\t\t\tlet html = this.modalForm.querySelector('[name=html]');\n\n\t\t\tif (this.editor && html) {\n\t\t\t\tthis.editor.save().then((data) => {\n\t\t\t\t\thtml.value = JSON.stringify(data);\n\t\t\t\t\tthis.editor.destroy();\n\t\t\t\t\tthis.sendFrom(this.modalForm);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.sendFrom(this.modalForm);\n\t\t\t}\n\t\t})\n\t}\n\n\tfetchElement(elementId) {\n\t\tlet url = this.container.dataset.request + '?';\n\t\turl += new URLSearchParams({\n\t\t\tlayoutmode: true,\n\t\t\telementId: elementId\n\t\t}).toString();\n\t\tfetch(url)\n\t\t.then(response => response.text())\n\t\t.then((element) => {\n\t\t\tconsole.log(element);\n\t\t\tthis.container.innerHTML = element;\n\n\t\t\tlet html = this.modalForm.querySelector('[name=html]');\n\t\t\tif (html) {\n\t\t\t\tthis.editor = new Editor('editor', html.value);\n\t\t\t} else {\n\t\t\t\tthis.editor = null;\n\t\t\t}\n\t\t})\n\t\t.catch(err => console.log(err))\n\t}\n\n\tsendFrom(form) {\n\t\tfetch(form.getAttribute('action'), {\n\t\t\tmethod: 'POST',\n\t\t\tbody: new FormData(form)\n\t\t})\n\t\t.then(response => response.json())\n\t\t.then((json) => {\n\t\t\tif (json.status != 200) {\n\t\t\t\tthrow new Exception('something went wrong');\n\t\t\t}\n\t\t\tthis.modal.closeModal();\n\t\t})\n\t\t.catch(err => console.log(err))\n\t}\n\n\tonDispatch(event) {\n\t\tif (this.main.debug) {\n\t\t\tconsole.debug(\"LayoutElements::dispatch\");\n\t\t}\n\n\t\tlet button = event.detail;\n\t\tthis.element = button.parentNode.parentNode;\n\t\tlet id = this.readId(this.element);\n\n\t\tif (!id) {\n\t\t\twindow.location.reload();\n\t\t}\n\n\t\tfetch('/rhino/contents/element/' + id, {\n\t\t\theaders: {\n\t\t\t\t'X-Requested-With': 'XMLHttpRequest'\n\t\t\t}\n\t\t}).then(response => response.text()).then(text => this.updateContent(text)).catch();\n\t}\n\n\tupdateContent(content) {\n\t\tif (!content.length) {\n\t\t\tthis.element.remove();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tlet container = this.element.querySelector('.element-container');\n\t\tif (container) {\n\t\t\tcontainer.innerHTML = content;\n\t\t}\n\t}\n\n\treadId(element) {\n\t\treturn element.id.replace('element-', '');\n\t}\n\n\tsetPosition(element, position) {\n\t\tlet id = element.id.replace('element-', '');\n\n\t\tif (position < 0) {\n\t\t\tposition = 0;\n\t\t}\n\n\t\tfetch('/rhino/contents/change/' + id + \"?\" + new URLSearchParams({\n\t\t\tkey: 'position',\n\t\t\tvalue: position\n\t\t}), {\n\t\t\theaders: {\n\t\t\t\t'X-Requested-With': 'XMLHttpRequest'\n\t\t\t}\n\t\t})\n\t\t.then(response => response.json())\n\t\t.then(json => console.log(json))\n\t\t.catch();\n\t}\n\n}"],"file":"elements.js"}