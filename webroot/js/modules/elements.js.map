{"version":3,"names":[],"mappings":"","sources":["elements.js"],"sourcesContent":["import DragDrop from \"./dragdrop.js\";\nimport Editor from \"./editor.js\";\n\n/**\n * \n */\nexport default class LayoutElements {\n\t/**\n\t * \n\t * @param {*} main \n\t */\n\tconstructor(main) {\n\t\tthis.main = main;\n\n\t\tif (this.main.debug) {\n\t\t\tconsole.debug(\"LayoutElements::const\");\n\t\t}\n\n\t\tthis.Config = {\n\t\t\tnewButtonID: 'new-content',\n\t\t\tmainID: 'layout-container',\n\t\t\ttokenSelector: 'meta[name=\"csrfToken\"]',\n\t\t\telementSelector: '.layout-element'\n\t\t}\n\n\t\tthis.newButton = document.getElementById(this.Config.newButtonID);\n\t\tthis.mainContainer = document.getElementById(this.Config.mainID);\n\t\tthis.elements = document.querySelectorAll(this.Config.elementSelector);\n\t\tthis.csrfToken = document.querySelector(this.Config.tokenSelector).getAttribute('content');\n\n\t\tthis.DragDrop = new DragDrop();\n\t\t\t\n\t\tif (this.newButton) {\n\t\t\tthis.setup();\n\t\t}\n\t}\n\t\n\tsetup() {\n\t\tthis.DragDrop.loadElements(\n\t\t\tthis.elements,\n\t\t\t(element, position) => this.setPosition(element, position)\n\t\t);\n\n\t\tthis.newButton.addEventListener('click', () => this.newContent(this.newButton.dataset.url));\n\t\tthis.elements.forEach(nodeElement => {\n\t\t\tnew Element(this, nodeElement);\n\t\t});\n\t}\n\n\tnewContent(url) {\n\t\tthis.postFetch(url)\n\t\t\t.then((response) => response.text())\n\t\t\t.then((html) => {\n\t\t\t\tlet element = new Element(this, html);\n\t\t\t\tthis.mainContainer.appendChild(element.nodeElement);\n\t\t\t});\n\t}\n\n\tasync updateContent(action, url, element, data = {}) {\n\t\tif (action == 'save') {\n\t\t\tdata = await element.get();\n\t\t}\n\n\t\tthis.postFetch(url, data)\n\t\t.then((response) => response.text())\n\t\t.then((html) => {\n\t\t\tif (action == 'update') {\n\t\t\t\tlet elementNew = new Element(this, html);\n\t\t\t\tthis.mainContainer.insertBefore(elementNew.nodeElement, element.nodeElement);\n\t\t\t}\n\t\t\t\n\t\t\tif (action == 'delete' || action == 'update') {\n\t\t\t\telement.destroy();\n\t\t\t}\n\t\t});\n\t}\n\n\tsetPosition(element, position) {\n\t\tlet id = element.id.replace('element-', '');\n\t\tlet url = '/rhino/contents/update/' + id\n\n\t\tif (position < 0) {\n\t\t\tposition = 0;\n\t\t}\n\n\t\tconsole.log(this);\n\n\t\tthis.updateContent('move', url, element, { position: position });\n\t}\n\n\tasync postFetch(url, data = '') {\n\t\treturn fetch(url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'X-CSRF-Token': this.csrfToken,\n\t\t\t\t'X-Requested-With': 'XMLHttpRequest'\n\t\t\t},\n\t\t\tcredentials: \"same-origin\",\n\t\t\tbody: JSON.stringify(data)\n\t\t})\n\t}\n}\n\nclass Element {\n\tconstructor(handler, element = null) {\n\t\tthis.elementHandler = handler;\n\n\t\tthis.fields = [\n\t\t\t'element_id',\n\t\t\t'html'\n\t\t];\n\n\t\tif (typeof element == \"object\" && element.nodeType) {\n\t\t\tthis.nodeElement = element;\n\t\t} else if (typeof element == \"string\") {\n\t\t\tthis.nodeElement = this.createElement(element);\n\t\t}\n\n\t\tthis.html = this.nodeElement.querySelector('[name=html]');\n\t\tthis.select = this.nodeElement.querySelector('[name=element_id]');\n\n\t\tthis.id = this.nodeElement.dataset.id;\n\t\tthis.position = this.nodeElement.dataset.position;\n\n\t\tthis.elementHandler.DragDrop.addElement(this.nodeElement);\n\n\t\tthis.initialize();\n\t}\n\n\tinitialize() {\t\t\n\t\tlet saveButton = this.nodeElement.querySelector('[name=save]');\n\t\tlet deleteButton = this.nodeElement.querySelector('[name=delete]');\n\t\tlet toggleButton = this.nodeElement.querySelector('[name=toggle]');\n\n\t\tthis.select.addEventListener('change', () => this.elementHandler.updateContent(\n\t\t\t'update',\n\t\t\tthis.select.dataset.url,\n\t\t\tthis,\n\t\t\t{ element_id: this.select.value },\n\t\t));\n\n\t\tsaveButton.addEventListener('click', () => this.elementHandler.updateContent(\n\t\t\t'save',\n\t\t\tsaveButton.dataset.url,\n\t\t\tthis\n\t\t));\n\n\t\ttoggleButton.addEventListener('change', () => this.elementHandler.updateContent(\n\t\t\t'update',\n\t\t\ttoggleButton.dataset.url,\n\t\t\tthis,\n\t\t\t{ active: !toggleButton.value }\n\t\t));\n\n\t\tdeleteButton.addEventListener('click', () => this.elementHandler.updateContent(\n\t\t\t'delete',\n\t\t\tdeleteButton.dataset.url,\n\t\t\tthis\n\t\t));\n\n\t\tlet editor = this.nodeElement.querySelector('.editor');\n\t\tif (editor) {\n\t\t\tthis.addEditor(editor);\n\t\t}\n\t}\n\n\tcreateElement(html) {\n\t\tlet template = document.createElement('template');\n\t\ttemplate.innerHTML = html.trim();\n\n\t\tlet element = template.content.firstChild;\n\t\treturn element;\n\t}\n\n\taddEditor(editor) {\n\t\tthis.editor = editor;\n\t\tthis.nodeElement.editor = new Editor(this.editor, this.html.value);\n\t}\n\n\tasync get() {\n\t\tif (this.editor) {\n\t\t\tlet editorData = await this.editor.save();\n\t\t\tthis.html.value = JSON.stringify(editorData);\n\t\t}\n\n\t\treturn {\n\t\t\thtml: this.html.value,\n\t\t\telement_id: this.select.value\n\t\t};\n\t}\n\n\tdestroy() {\n\t\tthis.nodeElement.remove();\n\t}\n}"],"file":"elements.js"}