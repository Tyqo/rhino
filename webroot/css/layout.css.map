{"version":3,"sources":["settings.scss","lib/utils.scss","lib/rwd.scss","lib/type-setting.scss","layout.css","lib/classes.scss","lib/stack.scss","lib/center.scss","lib/cluster.scss","lib/colors.scss","lib/_index.scss","layout.scss"],"names":[],"mappings":"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","file":"layout.css","sourcesContent":["/**\n * _settings.scss\n *\n * Use Sass variables and custom properties as appropriate, both are possible\n */\n\n/**********\n * Border *\n **********/\n\n$border: (\n\twidth: 2px,\n\tradius: 4px,\n\tcolor: currentColor,\n\ttype: solid,\n);\n\n$outline: (\n\twidth: 4px\n);\n\n/********\n * Typo *\n ********/\n\n$use-type-scale: false;\n$vertical-unit: 1.5rem;\n$modular-scale-ratio: 1.125;\n\n$font-sizes: (\n\t100: 0.8,\n\t200: 1,\n\t300: 1.125,\n\t400: 1.2,\n\t500: 1.4,\n\t600: 1.75,\n\t700: 2.1,\n\t800: 2.8,\n\t900: 3.2,\n);\n\n\n/************\n * Measures *\n ************/\n$min-header-height: 5rem;\n$max-header-height: 6.5rem;\n\n$inner-bound-width: 68rem;\n$outer-bound-width: 86rem;\n\n$min-supported-screen-width: 320px;\n$max-supported-screen-width: 3440px;\n\n$spacing: 1rem;\n\n$spacings: (\n\t100: $spacing * 0.25,\n\t200: $spacing * 0.5,\n\t300: $spacing,\n\t400: $spacing * 2,\n\t500: $spacing * 4,\n\t600: $spacing * 6,\n\t700: $spacing * 8,\n\t800: $spacing * 10,\n\t900: $spacing * 14,\n);\n\n\n/********************\n * Options/Switches *\n ********************/\n\n$default-colors: (\n\tprimary: hsl(162, 68%, 58%),\n\tsecondary: hsl(194, 53%, 55%),\n\tbackground: hsl(218, 13.2%, 39%),\n\tneutral: hsl(235, 5%, 98% - 38),\n\twarning: #ffca28,\n\terror: #e53935,\n\tsuccess: #43a047,\n);\n\n\n/********************\n * Options/Switches *\n ********************/\n$debug-base-line-grid: false;\n\n// body-text in full-width containers aligns with outer-bound\n$full-width-fix: true;\n\n// header collapses on scroll-down\n$collapsable-header: true;\n\n// subtracts header height from screen-heighht\n$substract-header-height: false;\n\n // fade in elements when page has loaded\n$fade-in-transition: false;\n\n// loading screen type [spinner, dots, bars]\n$loader: 'spinner';\n\n // sets the color for header and hero to contrast-color\n$start-dark-background: false;\n\n // sets the style for the navbar [default, folding]\n$nav-style: 'default';\n\n// Toggle wether all ul & ol elements will recive an Overwrite\n$list-reset: false;\n\n// --- pico ---\n\n// Set the root element for $enable-semantic-container and $enable-responsive-spacings\n$semantic-root-element: \"body\";\n\n// Enable <header>, <main>, <footer> inside $semantic-root-element as containers\n$enable-semantic-container: true;\n\n// Enable .container and .container-fluid\n$enable-class-container: true;\n\n// Enable a centered viewport for <header>, <main>, <footer> inside $enable-semantic-container \n// Fluid layout if disabled\n$enable-viewport: true;\n\n// Enable responsive spacings for <header>, <main>, <footer>, <section>, <article>\n// Fixed spacings if disabled\n$enable-responsive-spacings: true;\n\n// Enable responsive typography\n// Fixed root element size if disabled\n$enable-responsive-typography: true;\n\n// Enable .classes\n// .classless version if disabled\n$enable-classes: true;\n\n// Enable .grid class\n$enable-grid: true;\n\n// Enable transitions\n$enable-transitions: true;\n\n// Enable overriding with !important\n$enable-important: true;\n\n/*****************\n *  Breakpoints  *\n *****************/\n\n// xs: Extra small (portrait phones)\n// sm: Small(landscape phones)\n// md: Medium(tablets)\n// lg: Large(desktops)\n// xl: Extra large (large desktops)\n\n// NOTE:\n// To provide an easy and fine styling on each breakpoint\n// we didn't use @each, @mixin or @include.\n// That means you need to edit each CSS selector file to add a breakpoint\n\n// Breakpoints\n// 'null' disable the breakpoint\n$breakpoints: (\n\txs: 0,\n\tsm: 576px,\n\tmd: 768px,\n\tlg: 992px,\n\txl: 1200px,\n);\n\n// Viewports\n$viewports: (\n\t// 'null' disable the viewport on a breakpoint\n\tsm: 510px,\n\tmd: 700px,\n\tlg: 920px,\n\txl: 1130px\n);","@use \"sass:math\";\n/**\n * src/css/mixins/_utils.scss\n *\n * Utility mixins and functions\n *\n * @author Johannes Braun <j.braun@agentur-halma.de>\n * @package libhalma\n */\n\n/**\n * strip-unit\n *\n * Returns the unitless number\n * From: https://css-tricks.com/snippets/sass/strip-unit-function/\n *\n * @param number\n * @return number\n */\n@function strip-unit ($number) {\n\t@if type-of ($number) == 'number' and not unitless ($number) {\n\t\t@return math.div($number, ($number * 0 + 1));\n\t}\n\t@return $number;\n}\n\n\n\n/**\n * pow\n *\n * Return the number risen to the power of n\n * From: https://css-tricks.com/snippets/sass/power-function/\n *\n * @param number \tThe operator\n * @param exp \t\tThe exponent\n * @return number\n */\n@function pow ($number, $exp) {\n\t$val: 1;\n\t@if $exp > 0 {\n\t\t@for $i from 1 through $exp {\n\t\t\t$val: $val * $number;\n\t\t}\n\t}\n\t@return $val;\n}\n\n/**\n * Calculates the sRGB luma of a colour.\n *\n * From: https://lnikki.la/articles/sass-better-colour-based-on-brightness/\n *\n * Math nicked from a great Thoughtbot article by Reda Lemeden:\n * http://robots.thoughtbot.com/closer-look-color-lightness\n */\n\n@function luma($c) {\n\t$-local-red: red(rgba($c, 1));\n\t$-local-green: green(rgba($c, 1));\n\t$-local-blue: blue(rgba($c, 1));\n\n\t@return math.div((0.2126 * $-local-red  + 0.7152 * $-local-green + 0.0722 * $-local-blue), 255);\n}\n\n\n/*\n * Picks a colour from two options based on which one is more visible\n * on the given background colour.\n *\n * From: https://lnikki.la/articles/sass-better-colour-based-on-brightness/\n *\n * Usage: color-for-bg($bg-color, $color-1, $color-2)\n */\n\n@function color-for-bg($bg, $c1, $c2) {\n\t$bg-luma: luma($bg);\n\t$c1-luma: luma($c1);\n\t$c2-luma: luma($c2);\n\n\t$c1-diff: abs($bg-luma - $c1-luma);\n\t$c2-diff: abs($bg-luma - $c2-luma);\n\n\t@if $c1-diff > $c2-diff {\n\t\t@return $c1;\n\t}\n\t@else {\n\t\t@return $c2;\n\t}\n}\n\n// Output color in RGB format\n@function to-rgb($color) {\n\t@return unquote(\"rgb(#{red($color)}, #{green($color)}, #{blue($color)})\");\n}\n\n/*\n * @author Carsten Coull <c.coull@agentur-halma.de>\n *\n * Slope Utilits\n * sets a Graph to use for unit\n *\n * Needs a calc support\n */\n\n/*\n * for fluid type to fit to screen;\n */\n@mixin slope-type($slope, $offset: 1rem) {\n\tfont-size: $offset * (1 + $slope);\n\tfont-size: calc(#{slope-size($slope, $offset)});\n\tline-height: 1em;\n\n\t@include for-size($m) {\n\t\tfont-size: $offset * (2 + $slope);\n\t\tfont-size: calc(#{slope-size($slope, $offset)});\n\t}\n\tline-height: 1em;\n}\n\n@function slope($slope, $offset: 1rem) {\n\t@return (#{$slope} *  100vw + #{$offset});\n}\n\n/*\n * Sets a fluid Unit between to Values\n *\n * $min-size: Minimum Value\n * $max-size: Maximum Value\n * $min-view: Size at which to use $min-size\n * $max-view: Size at which to use $max-size\n *\n * works best with px Unit\n */\n\n@function slope-minmax($min-size: 16px, $max-size: 124px, $min-view: 320px, $max-view: 1920px) {\n\t$slope: ($max-size - $min-size) / ($max-view - $min-view);\n\t$offset: ($slope * $min-view) - $min-size;\n\n\t@return (100vw * #{$slope} - #{$offset});\n}\n\n@mixin slope-type-minmax ($min-size: 16px, $max-size: 124px, $min-view: 320px, $max-view: 1920px) {\n\tfont-size: $min-size;\n\tline-height: 1.125em;\n\t// margin-bottom: 1.125em;\n\n\t@media (min-width: $min-view) {\n\t\tfont-size: calc(#{slope-minmax($min-size, $max-size, $min-view, $max-view)});\n\t}\n\n\t@media (min-width: $max-view) {\n\t\tfont-size: $max-size;\n\t}\n}\n\n/* Can be used with Custom Proporties */\n@mixin slope-property-minmax ($property, $min-size: 16px, $max-size: 124px, $min-view: 320px, $max-view: 1920px) {\n\t#{$property}: $min-size;\n\n\t@media (min-width: $min-view) {\n\t\t#{$property}: calc(#{slope-minmax($min-size, $max-size, $min-view, $max-view)});\n\t}\n\n\t@media (min-width: $max-view) {\n\t\t#{$property}: $max-size;\n\t}\n}\n\n@function rem-to-px($rem) {\n\t@return (strip-unit($rem) * 16) * 1px;\n}\n\n@function px-to-rem($px) {\n\t@return math.div(strip-unit($px), 16) * 1rem;\n}\n\n@function slope-rem-minmax($min-size: 1rem, $max-size: 7.5rem, $min-view: 320px, $max-view: 1920px) {\n\t$slope: math.div(($max-size - $min-size), strip-unit(px-to-rem($max-view) - px-to-rem($min-view)));\n\t$offset: strip-unit($slope * px-to-rem($min-view)) - $min-size;\n\n\t@return clamp(#{$min-size}, (100vw * #{strip-unit($slope)}) - #{$offset}, #{$max-size});\n}\n\n@mixin fixed-ratio ($width, $height) {\n\tdisplay: block;\n\tposition: relative;\n\tmax-width: 100%;\n\t\n\t&::after {\n\t\tcontent: '';\n\t\theight: 0;\n\t\tpadding-bottom: math.div( $height, $width ) * 100%;\n\t\tdisplay: block;\n\t}\n\t\n\t& > *:first-child {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: hidden;\n\t}\n\n\t@supports(aspect-ratio: 1 / 1) {\n\t\taspect-ratio: math.div( $width, $height );\n\n\t\t&::after {\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t& > *:first-child {\n\t\t\tposition: static;\n\t\t}\n\t}\n}\n\n@mixin position ($type, $top: 0, $right: 0, $bottom: 0, $left: 0) {\n\tposition: $type;\n\ttop: $top;\n\tright: $right;\n\tbottom: $bottom;\n\tleft: $left;\n}","/**\n * libhalma/_rwd.scss\n *\n * Breakpoints, media queries, responsive webdesign\n * See: https://medium.freecodecamp.org/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862\n *\n * @usage: @include for-size(tablet-landscape-up) { ... }\n *\t\t\t\t Use a pre devined size from $breakpoints with added '-up' or '-down' for direction.\n *\n * \t\t\t\t @include for-size(1200px, up) { ... }\n *\t\t\t\t If second parameter is 'up' or 'down' it will be used as direction and a custom size can be used.\n *\n *\n * @author Johannes Braun <j.braun@agentur-halma.de>, Carsten Coull <c.coull@agebtur-halma.de>\n * @package libhalma\n */\n\n @use '../settings' as *;\n\n@mixin for-size($size, $direction: false) {\n\t$notFound: true;\n\n\t@if $direction {\n\t\t@if $direction == 'up' {\n\t\t\t$notFound: false;\n\t\t\t@media (min-width: $size) {\n\t\t\t\t@content;\n\t\t\t}\n\t\t} @else if $direction == 'down' {\n\t\t\t$notFound: false;\n\t\t\t@media (max-width: $size) {\n\t\t\t\t@content;\n\t\t\t}\n\t\t}\n\t} @else {\n\t\t@each $breakpoint, $width in $breakpoints {\n\t\t\t@if $size == #{$breakpoint}-up {\n\t\t\t\t$notFound: false;\n\t\t\t\t@media (min-width: #{$width}) {\n\t\t\t\t\t@content;\n\t\t\t\t}\n\t\t\t} @else if $size == #{$breakpoint}-down {\n\t\t\t\t$notFound: false;\n\t\t\t\t@media (max-width: #{$width}) {\n\t\t\t\t\t@content;\n\t\t\t\t}\n\t\t\t} @else if $size == $breakpoint {\n\t\t\t\t$notFound: false;\n\t\t\t\t@media (max-width: #{$width - 1}) {\n\t\t\t\t\t@content;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t@if $notFound {\n\t\t@error \"Breakpoint: no width for #{$size} devined\";\n\t}\n}\n","/**\n * src/css/libhalma/_vertical_rhythm.scss\n *\n * @author Carsten Coull <c.coull@agentur-halma.de>\n * @package libhalma\n */\n@use \"sass:math\";\n@use \"sass:map\";\n@use '../settings' as *;\n\n$font-sizes: (\n\t100: 0.5,\n\t200: 0.8,\n\t400: 1,\n\t500: 1.2,\n\t600: 1.4,\n\t700: 1.75,\n\t800: 2.1,\n\t900: 3.8,\n) !default;\n\n@if $use-type-scale {\n\n\t$weight: 100;\n\t$font-sizes: ();\n\n\t@for $weight from 1 to 10 {\n\t\t$delta: $weight - 4;\n\t\t$value: math.pow($modular-scale-ratio, $delta);\n\t\t$font-sizes: map-merge($font-sizes, ($weight * 100: $value));\n\t}\n}\n\n\n@mixin type-setting($level: 400, $margin-bottom: 'none') {\n\n\t$font-size: map-get($font-sizes, $level);\n\n\t@if type-of($font-size) != 'number' {\n\t\t@debug \"Could not get font-size vor level \" + $level;\n\t}\n\n\t// Strip unit\n\t$vu: math.div($vertical-unit, $vertical-unit * 0 + 1);\n\t$line-height: math.div($vu, $font-size);\n\n\t// Make sure line-height is at least 1 times the vertical unit\n\t@if $line-height > 0 { // prevent endless loop if somehow line-height is zero or negative\n\t\t@while $line-height < 1 {\n\t\t\t$line-height: $line-height * 1.5; // Steps up half a vertical unit at each step\n\t\t}\n\t\t// $line-height: math.div($line-height, 1.41421);\n\t}\n\n\tfont-size: $font-size + rem;\n\tline-height: $line-height + em;\n\n\t@if $margin-bottom != 'none' {\n\t\tmargin-bottom: ($line-height * $margin-bottom) + rem;\n\t}\n}\n\n\n$debug-base-line-grid: true;\n$visual-base-line-grid-offset: -16px !default;\n$visual-base-line-grid-above: true !default;\n\n// Visual baseline grid for debugging (\"Grundlinienraster\")\n@if $debug-base-line-grid {\n\tbody {\n\t\tposition: relative;\n\t}\n\t.debug-base-line-grid {\n\t\tbackground-image: linear-gradient(\n\t\t\tto bottom,\n\t\t\ttransparent 0,\n\t\t\ttransparent calc(#{$vertical-unit}),\n\t\t\trgba(tomato, 0.1) calc(#{$vertical-unit}),\n\t\t\trgba(tomato, 0.1)\n\t\t);\n\t\tbackground-size: 100% (2 * $vertical-unit);\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tbottom: 0;\n\t\tright: 0;\n\t\tpointer-events: none;\n\t\t@if $visual-base-line-grid-above {\n\t\t\tz-index: 32766;\n\t\t}\n\t\t@else {\n\t\t\tz-index: 0;\n\t\t}\n\t\ttop: $visual-base-line-grid-offset;\n\t}\n}\n\n","/**\n * _settings.scss\n *\n * Use Sass variables and custom properties as appropriate, both are possible\n */\n/**********\n * Border *\n **********/\n/********\n * Typo *\n ********/\n/************\n * Measures *\n ************/\n/********************\n * Options/Switches *\n ********************/\n/********************\n * Options/Switches *\n ********************/\n/*****************\n *  Breakpoints  *\n *****************/\n/**\n * src/css/mixins/_utils.scss\n *\n * Utility mixins and functions\n *\n * @author Johannes Braun <j.braun@agentur-halma.de>\n * @package libhalma\n */\n/**\n * strip-unit\n *\n * Returns the unitless number\n * From: https://css-tricks.com/snippets/sass/strip-unit-function/\n *\n * @param number\n * @return number\n */\n/**\n * pow\n *\n * Return the number risen to the power of n\n * From: https://css-tricks.com/snippets/sass/power-function/\n *\n * @param number \tThe operator\n * @param exp \t\tThe exponent\n * @return number\n */\n/**\n * Calculates the sRGB luma of a colour.\n *\n * From: https://lnikki.la/articles/sass-better-colour-based-on-brightness/\n *\n * Math nicked from a great Thoughtbot article by Reda Lemeden:\n * http://robots.thoughtbot.com/closer-look-color-lightness\n */\n/*\n * Picks a colour from two options based on which one is more visible\n * on the given background colour.\n *\n * From: https://lnikki.la/articles/sass-better-colour-based-on-brightness/\n *\n * Usage: color-for-bg($bg-color, $color-1, $color-2)\n */\n/*\n * @author Carsten Coull <c.coull@agentur-halma.de>\n *\n * Slope Utilits\n * sets a Graph to use for unit\n *\n * Needs a calc support\n */\n/*\n * for fluid type to fit to screen;\n */\n/*\n * Sets a fluid Unit between to Values\n *\n * $min-size: Minimum Value\n * $max-size: Maximum Value\n * $min-view: Size at which to use $min-size\n * $max-view: Size at which to use $max-size\n *\n * works best with px Unit\n */\n/* Can be used with Custom Proporties */\n/**\n * libhalma/_rwd.scss\n *\n * Breakpoints, media queries, responsive webdesign\n * See: https://medium.freecodecamp.org/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862\n *\n * @usage: @include for-size(tablet-landscape-up) { ... }\n *\t\t\t\t Use a pre devined size from $breakpoints with added '-up' or '-down' for direction.\n *\n * \t\t\t\t @include for-size(1200px, up) { ... }\n *\t\t\t\t If second parameter is 'up' or 'down' it will be used as direction and a custom size can be used.\n *\n *\n * @author Johannes Braun <j.braun@agentur-halma.de>, Carsten Coull <c.coull@agebtur-halma.de>\n * @package libhalma\n */\n/**\n * src/css/libhalma/_vertical_rhythm.scss\n *\n * @author Carsten Coull <c.coull@agentur-halma.de>\n * @package libhalma\n */\nbody {\n  position: relative;\n}\n\n.debug-base-line-grid {\n  background-image: linear-gradient(to bottom, transparent 0, transparent calc(1.5rem), rgba(255, 99, 71, 0.1) calc(1.5rem), rgba(255, 99, 71, 0.1));\n  background-size: 100% 3rem;\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  pointer-events: none;\n  z-index: 32766;\n  top: -16px;\n}\n\n/**\n * src/css/libhalma/_classes.scss\n *\n * Predefined utility classes\n *\n * @author C.Coull <c.coull@agentur-halma.de>\n * @author J. Braun <j.braun@agentur-halma.de>\n * @package libhalma\n * @version 2021-05-27\n */\n/**\n * The Stack\n *\n * Spacing for vertically stacked blocks\n */\n/**\n * From: EveryLayout\n */\n/**\n * The Cluster\n *\n * https://every-layout.dev/demos/cluster-ctas/\n *\n * We can use `gap` now on flexbox items, so it gets really easy now :-)\n */\n:root {\n  --primary-50: #e5faf4;\n  --primary-100: #bff3e3;\n  --primary-200: #98ebd2;\n  --primary-300: #72e4c2;\n  --primary-400: #4bddb1;\n  --primary: #4bddb1;\n  --primary-500: #26c595;\n  --primary-600: #21ab82;\n  --primary-700: #1d9a75;\n  --primary-800: #1a8968;\n  --primary-900: #156f54;\n  --secondary-50: #d8f0f8;\n  --secondary-100: #b2e2f0;\n  --secondary-200: #8dd2e8;\n  --secondary-300: #68c3df;\n  --secondary-400: #43b3d6;\n  --secondary: #43b3d6;\n  --secondary-500: #2a92b2;\n  --secondary-600: #267d97;\n  --secondary-700: #246e84;\n  --secondary-800: #235f71;\n  --secondary-900: #1d4a58;\n  --background-50: #b7bdc8;\n  --background-100: #9da5b4;\n  --background-200: #838da0;\n  --background-300: #6a768b;\n  --background-400: #566071;\n  --background: #566071;\n  --background-500: #3c424e;\n  --background-600: #2e343d;\n  --background-700: #262a31;\n  --background-800: #1d2026;\n  --background-900: #0f1114;\n  --neutral-50: #f4f4f5;\n  --neutral-100: #dcdce0;\n  --neutral-200: #c4c5ca;\n  --neutral-300: #acadb4;\n  --neutral-400: #94959e;\n  --neutral: #94959e;\n  --neutral-500: #747581;\n  --neutral-600: #666770;\n  --neutral-700: #5c5d66;\n  --neutral-800: #52535b;\n  --neutral-900: #44444b;\n  --warning-50: #faf5e4;\n  --warning-100: #f4e6bd;\n  --warning-200: #efd994;\n  --warning-300: #ebcb6a;\n  --warning-400: #e7be40;\n  --warning: #e7be40;\n  --warning-500: #d5a515;\n  --warning-600: #bd920e;\n  --warning-700: #af8607;\n  --warning-800: #a27a00;\n  --warning-900: #846300;\n  --error-50: #f3dfde;\n  --error-100: #e8bdbc;\n  --error-200: #de9a98;\n  --error-300: #d47674;\n  --error-400: #cc514e;\n  --error: #cc514e;\n  --error-500: #b0302d;\n  --error-600: #9b2623;\n  --error-700: #901d1a;\n  --error-800: #841411;\n  --error-900: #6d0c0a;\n  --success-50: #b9e2bb;\n  --success-100: #99d49b;\n  --success-200: #78c77c;\n  --success-300: #58b95c;\n  --success-400: #43a047;\n  --success: #43a047;\n  --success-500: #317534;\n  --success-600: #285f2a;\n  --success-700: #225124;\n  --success-800: #1c431e;\n  --success-900: #132d14;\n  --white: #fff;\n  --black: #0C0E26;\n}\n\n/**\n * src/css/libhalma/_libhalma.scss\n *\n * Libhalma: A simple, solid and accessible basic library for css\n *\n * @author Johannes Braun <j.braun@agentur-halma.de>\n * @package libhalma\n * @version 2020-11-09\n */\nbody {\n  padding-top: 2rem;\n}\n\n.layout-menu {\n  background-color: grey;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  z-index: 200;\n  height: 2rem;\n  padding: 0 1rem;\n}\n.layout-menu__button {\n  display: inline-block;\n  background-color: #4bddb1;\n  font-weight: 800;\n  color: #fff;\n  text-decoration: none;\n  border: none;\n  padding: 0 1rem;\n}\n.layout-menu__button:focus, .layout-menu__button:hover {\n  background-color: #26c595;\n}\n.layout-menu__button + * {\n  margin-left: auto;\n}\n.layout-menu > * > * {\n  margin-bottom: 0;\n}\n\n.layout-element {\n  position: relative;\n  border: solid 4px transparent;\n  margin-top: -4px;\n  margin-bottom: -4px;\n  transition: 150ms border-color;\n}\n.layout-element:hover, .layout-element:focus-within {\n  border: solid 4px #4bddb1;\n}\n.layout-element:hover .layout-handle, .layout-element:focus-within .layout-handle {\n  opacity: 1;\n}\n\n.layout-handle {\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  right: 1rem;\n  transition: 150ms opacity;\n  display: flex;\n}\n\n.rhino-button {\n  display: inline-block;\n  background-color: #4bddb1;\n  color: #fff;\n  font-weight: 800;\n  text-decoration: none;\n  border: none;\n  padding: 0.5rem 1rem;\n}\n.rhino-button:focus, .rhino-button:hover {\n  background-color: #26c595;\n}\n\n.modal-form fieldset {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  border: none;\n}\n.modal-form .input {\n  display: flex;\n  flex-direction: column;\n  min-width: 12ex;\n  width: 100%;\n}\n.modal-form input[type=text], .modal-form input[type=number], .modal-form select, .modal-form textarea {\n  color: var(--rhino-text-color);\n  padding: var(--rhino-margin-200);\n  box-shadow: 0 0 2rem #ddd;\n  border-radius: 0.5rem;\n  border-radius: 4px;\n  border: none;\n}\n.modal-form input[type=checkbox] {\n  width: 1em;\n  height: 1em;\n  accent-color: #4bddb1;\n  margin-right: 0.5rem;\n}\n\n#close-modal {\n  background-color: unset;\n  border: none;\n  display: block;\n  height: 2rem;\n  padding: 0.4rem;\n  color: currentColor;\n}\n#close-modal svg {\n  fill: currentColor;\n  display: block;\n  width: auto;\n  height: 1rem;\n}\n\n.modal {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: rgb(255, 255, 255);\n  min-width: 42rem;\n  max-width: 100vw;\n  resize: both;\n  overflow: auto;\n  border-radius: 0.25rem;\n  border: none;\n}\n.modal::backdrop {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n.modal-header {\n  display: flex;\n  justify-content: space-between;\n  background-color: black;\n  color: #FFF;\n  padding-left: 0.5rem;\n  font-weight: 600;\n}\n.modal-header > * {\n  margin-bottom: 0;\n}\n.modal-main {\n  padding: 1rem;\n  justify-self: stretch;\n  align-self: stretch;\n}\n.modal-form {\n  display: grid;\n  gap: 2rem;\n}\n.modal-form legend {\n  display: none;\n}","/**\n * src/css/libhalma/_classes.scss\n *\n * Predefined utility classes\n *\n * @author C.Coull <c.coull@agentur-halma.de>\n * @author J. Braun <j.braun@agentur-halma.de>\n * @package libhalma\n * @version 2021-05-27\n */\n\n// Screenreader only\n@mixin sr-only($visible-on-focus: true) {\n\t// color: transparent;\n\tdisplay: inline-block;\n\topacity: 0;\n\tbackground: none;\n\tposition: absolute;\n\tline-height: 0;\n\tfont-size: 0;\n\toverflow: hidden;\n\twidth: 2px;\n\theight: 2px;\n\tmargin: -1px;\n\n\t@if $visible-on-focus {\n\t\t&:focus,\n\t\t&:active {\n\t\t\topacity: 1;\n\t\t\t// color: inherit;\n\t\t\tfont-size: inherit;\n\t\t\tline-height: inherit;\n\t\t\twidth: auto;\n\t\t\twidth: max-content;\n\t\t\theight: auto;\n\t\t\theight: max-content;\n\t\t\tmargin: 0;\n\t\t\tz-index: 1;\n\t\t}\n\t}\n}\n\n@mixin bound($bound-width: 64rem, $padding: false) {\n\tmax-width: $bound-width;\n\tmargin-left: auto;\n\tmargin-right: auto;\n\t\n\t@media screen and (min-width: $bound-width) {\n\t\tbox-sizing: content-box; // Yes ;-) see EveryLayout: Center\n\t}\n\t\n\t@if $padding {\n\t\tpadding-left: $padding;\n\t\tpadding-right: $padding;\n\t}\n}\n\n\n// Take scrollbar-width in to account\n// @see https://destroytoday.com/blog/100vw-and-the-horizontal-overflow-you-probably-didnt-know-about\n@mixin full-width($scrollbar-width: 0) {\n\t--half-screen-width: calc((100vw - #{$scrollbar-width}) / 2);\n\tmargin-left: calc(50% - var(--half-screen-width));\n\tmargin-right: calc(50% - var(--half-screen-width));\n}\n\n@mixin skip-link {\n\tposition: fixed;\n\tz-index: 200;\n\ttop: 0;\n\tleft: 50%;\n\ttransform: translate(-50%, -200%);\n\ttransition: transform 300ms ease-in-out;\n\t\n\t&:focus {\n\t\ttransform: translate(-50%, 0%);\n\t}\n}\n\n@mixin list-style-none {\n\tlist-style: none;\n\tpadding-left: 0;\n\t\n\tli {\n\t\tlist-style: none;\n\t\tposition: static;\n\t\tpadding: 0;\n\t\t\n\t\t&::before, &::marker {\n\t\t\tcontent: none;\n\t\t\tdisplay: none;\n\t\t}\n\t}\n}\n\n// set thumb and Background Color\n// use on html to set global\n// Webkit and Chromium will ignore color when size isn't set\n@mixin scrollbars(\n\t$foreground-color: #999,\n  \t$background-color: #333,\n  \t$size: false\n) {\n\t@if $size {\n\t\t// For Chrome & Safari\n\t\t&::-webkit-scrollbar {\n\t\t\twidth: $size;\n\t\t\theight: $size;\n\t\t}\n\t}\n\n\t&::-webkit-scrollbar-thumb {\n    background: $foreground-color;\n  }\n  &::-webkit-scrollbar-track {\n    background: var(--background-color);\n  }\n\n  // Standard version (Firefox only for now)\n  scrollbar-color: $foreground-color var(--background-color);\n}","/**\n * The Stack\n *\n * Spacing for vertically stacked blocks\n */\n\n$stack-spacing: 1rem !default;\n\n@mixin stack($spacing: $stack-spacing) {\n\t> * + * {\n\t\tmargin-top: $spacing;\n\t}\n}\n\n\n","/**\n * From: EveryLayout\n */\n@mixin center($max-width: false) {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\n\t@if $max-width {\n\t\tmax-width: $max-width;\n\t}\n}\n","/**\n * The Cluster\n *\n * https://every-layout.dev/demos/cluster-ctas/\n *\n * We can use `gap` now on flexbox items, so it gets really easy now :-)\n */\n\n$cluster-spacing: 1rem !default;\n$cluster-gap: true;\n\n@mixin cluster($spacing: $cluster-spacing, $use-gap: $cluster-gap) {\n  @if $use-gap {\n    gap: $spacing;\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n  } @else {\n    > * {\n      display: flex;\n      flex-wrap: wrap;\n      justify-content: flex-start;\n      align-items: center;\n      margin: calc(#{$spacing} / 2 * -1);\n    }\n  }\n\n  @if $use-gap != true {\n    > * > * {\n      margin: calc(#{$spacing} / 2);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:string';\n@use 'sass:list';\n@use 'sass:map';\n@use '../settings' as *;\n\n// Black & White\n$black: #0C0E26 !default;\n$white: #fff !default;\n\n// #9798a7\n\n$default-colors: (\n\tprimary: hsl(162, 68%, 58%),\n\tsecondary: hsl(194, 53%, 55%),\n\tbackground: hsl(218, 13.2%, 39%), // 800\n\tneutral: hsl(235, 5%, 98% - 38), // 50\n\twarning: #ffca28,\n\terror: #e53935,\n\tsuccess: #43a047,\n) !default;\n \n$saturation-multiplication: (\n\tprimary: 0,\n\tsecondary: 0.5,\n\tbackground: 0,\n\tneutral: 0,\n\twarning: -1,\n\terror: -1,\n\tsuccess: 0,\n) !default;\n\n$weights: (\n\t50,\n\t100,\n\t200,\n\t300,\n\t400,\n\t500,\n\t600,\n\t700,\n\t800,\n\t900,\n) !default;\n\n$lightness: (\n\t50: 36%,\n\t100: 27%,\n\t200: 18%,\n\t300: 9%,\n\t400: 0%,\n\t500: -12%,\n\t600: -18%,\n\t700: -22%,\n\t800: -26%,\n\t900: -32%,\n) !default;\n\n$saturation: (\n\t50: 30%,\n\t100: 28%,\n\t200: 26%,\n\t300: 24%,\n\t400: 22%,\n\t500: 18%,\n\t600: 14%,\n\t700: 8%,\n\t800: 0%,\n\t900: -6%,\n) !default;\n\n@function color($name, $weight) {\n\t$multi: map.get($saturation-multiplication, $name);\n\t$shade: clamp(map.get($saturation, $weight) * $multi, -100%, 100%);\n\t$light: map.get($lightness, $weight);\n\t$color: map.get($default-colors, $name);\n\t$return: color.adjust($color, $lightness: $light, $saturation: $shade);\n\n\t@if type-of($return)==\"color\" {\n\t\t// @debug \"is a Color!\";\n\t\t@return $return;\n\t}\n\n\t@else {\n\t\t@error \"not a Color!\";\n\t}\n\n\t@return \"\";\n}\n\n:root {\n\t@each $key, $color in $default-colors {\n\t\t@each $weight in $weights {\n\t\t\t// $multi: map.get($saturation-multiplication, $key);\n\t\t\t// $shade: clamp(map.get($saturation, $weight) * $multi, -100%, 100%);\n\t\t\t// $light: map.get($lightness, $weight);\n\n\t\t\t$current-color: color($key, $weight);\n\t\t\t// $current-color: #{color.adjust($color, $lightness: $light, $saturation: $shade)};\n\t\t\t\n\t\t\t--#{$key}-#{$weight}: #{$current-color};\n\n\t\t\t@if $weight == 400 {\n\t\t\t\t--#{$key}: #{$current-color};\n\t\t\t}\n\t\t}\n\t}\n\n\t--white: #{$white};\n\t--black: #{$black};\n}\n\n$grey-50: color(\"neutral\", 50);\n$grey-100: color(\"neutral\", 100);\n$grey-200: color(\"neutral\", 200);\n$grey-300: color(\"neutral\", 300);\n$grey-400: color(\"neutral\", 400);\n$grey-500: color(\"neutral\", 500);\n$grey-600: color(\"neutral\", 600);\n$grey-700: color(\"neutral\", 700);\n$grey-800: color(\"neutral\", 800);\n$grey-900: color(\"neutral\", 900);\n\n$primary-600: color(\"primary\", 400);\n$primary-700: color(\"primary\", 700);\n\n$secondary-500: color(\"secondary\", 500);\n$secondary-600: color(\"secondary\", 400);\n$secondary-700: color(\"secondary\", 700);\n\n$amber-50: color(\"warning\", 50);\n$amber-100: color(\"warning\", 100);\n$amber-300: color(\"warning\", 300);\n$amber-900: color(\"warning\", 900);\n\n$green-600: color(\"success\", 600);\n$green-700: color(\"success\", 700);\n$green-800: color(\"success\", 800);\n\n$red-700: color(\"error\", 700);\n$red-800: color(\"error\", 800);\n$red-900: color(\"error\", 900);\n\n\n// $primary-50: hsl($primary-hue, 32%, 10%) !default;\n// $primary-100: hsl($primary-hue, 38%, 18%) !default;\n// $primary-200: hsl($primary-hue, 44%, 26%) !default;\n// $primary-300: hsl($primary-hue, 50%, 34%) !default;\n// $primary-400: hsl($primary-hue, 56%, 42%) !default;\n// $primary-500: hsl($primary-hue, 62%, 50%) !default;\n// $primary-600: hsl($primary-hue, 68%, 58%) !default;\n// $primary-700: hsl($primary-hue, 74%, 64%) !default;\n// $primary-800: hsl($primary-hue, 82%, 74%) !default;\n// $primary-900: hsl($primary-hue, 96%, 82%) !default;\n\n// $secondary-hue: 194 !default;\n// $secondary: hsl(194, 53%, 55%) !default;\n// $secondary-50: hsl($secondary-hue, 18%, 12%) !default;\n// $secondary-100: hsl($secondary-hue, 26%, 18%) !default;\n// $secondary-200: hsl($secondary-hue, 32%, 21%) !default;\n// $secondary-300: hsl($secondary-hue, 38%, 27%) !default;\n// $secondary-400: hsl($secondary-hue, 46%, 38%) !default;\n// $secondary-500: hsl($secondary-hue, 52%, 43%) !default;\n// $secondary-600: hsl($secondary-hue, 53%, 55%) !default;\n// $secondary-700: hsl($secondary-hue, 62%, 56%) !default;\n// $secondary-800: hsl($secondary-hue, 72%, 68%) !default;\n// $secondary-900: hsl($secondary-hue, 84%, 94%) !default;\n\n// // Grey\n// $grey-hue: 205 !default;\n// $color: hsl(235, 52%, 10%);\n// $grey-50: hsl($grey-hue, 20%, 94%) !default;\n// $grey-100: hsl($grey-hue, 18%, 86%) !default;\n// $grey-200: hsl($grey-hue, 16%, 77%) !default;\n// $grey-300: hsl($grey-hue, 14%, 68%) !default;\n// $grey-400: hsl($grey-hue, 12%, 59%) !default;\n// $grey-500: hsl($grey-hue, 10%, 50%) !default;\n// $grey-600: hsl($grey-hue, 52%, 10%) !default;\n// $grey-700: hsl($grey-hue, 20%, 32%) !default;\n// $grey-800: hsl($grey-hue, 25%, 23%) !default;\n// $grey-900: hsl($grey-hue, 30%, 15%) !default;\n\n// // Amber -> warning / attention\n// $amber-50: #fff8e1 !default;\n// $amber-100: #ffecb3 !default;\n// $amber-200: #ffe082 !default;\n// $amber-300: #ffd54f !default;\n// $amber-400: #ffca28 !default;\n// $amber-500: #ffc107 !default;\n// $amber-600: #ffb300 !default;\n// $amber-700: #ffa000 !default;\n// $amber-800: #ff8f00 !default;\n// $amber-900: #ff6f00 !default;\n\n// // Green -> valid / success\n// $green-50: #e8f5e9 !default;\n// $green-100: #c8e6c9 !default;\n// $green-200: #a5d6a7 !default;\n// $green-300: #81c784 !default;\n// $green-400: #66bb6a !default;\n// $green-500: #4caf50 !default;\n// $green-600: #43a047 !default;\n// $green-700: #388e3c !default;\n// $green-800: #2e7d32 !default;\n// $green-900: #1b5e20 !default;\n\n// // Red -> invalid / error\n// $red-50: #ffebee !default;\n// $red-100: #ffcdd2 !default;\n// $red-200: #ef9a9a !default;\n// $red-300: #e57373 !default;\n// $red-400: #ef5350 !default;\n// $red-500: #f44336 !default;\n// $red-600: #e53935 !default;\n// $red-700: #d32f2f !default;\n// $red-800: #c62828 !default;\n// $red-900: #b71c1c !default;","/**\n * src/css/libhalma/_libhalma.scss\n *\n * Libhalma: A simple, solid and accessible basic library for css\n *\n * @author Johannes Braun <j.braun@agentur-halma.de>\n * @package libhalma\n * @version 2020-11-09\n */\n\n// Edit as needed\n\n@forward\"lib/utils\";\n\n@forward \"lib/rwd\";\n\n@forward \"lib/fluid-type\";\n\n@forward \"lib/type-setting\";\n\n@forward \"lib/classes\";\n\n@forward \"lib/box\";\n\n@forward \"lib/stack\";\n\n@forward \"lib/center\";\n\n@forward \"lib/cluster\";\n\n@forward \"lib/cover\";\n\n@forward \"lib/icon\";\n\n@forward \"lib/colors\";","@use \"sass:map\"; \n// Load Settings\n@use \"settings\" as *;\n\n// Get lib before custom\n@use \"lib\" as *;\n\n\n$menu-size: 2rem;\n\nbody {\n\t// padding-left: 300px;\n\tpadding-top: $menu-size;\n}\n\n.layout-menu {\n\tbackground-color: grey;\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tright: 0;\n\tz-index: 200;\n\theight: $menu-size;\n\n\tpadding: 0 1rem;\n\n\t&__button {\n\t\tdisplay: inline-block;\n\t\tbackground-color: color('primary', 400);\n\t\tfont-weight: 800;\n\t\tcolor: $white;\n\t\ttext-decoration: none;\n\t\tborder: none;\n\t\tpadding: 0 1rem;\n\t\t// line-height: 1;\n\t\t\n\t\t&:focus, &:hover {\n\t\t\tbackground-color: color('primary', 500);\n\t\t}\n\n\t\t& + * {\n\t\t\tmargin-left: auto;\n\t\t}\n\t}\n\n\t& > * > * {\n\t\tmargin-bottom: 0;\n\t}\n}\n\n.layout-element {\n\tposition: relative;\n\tborder: solid 4px transparent;\n\tmargin-top: -4px;\n\tmargin-bottom: -4px;\n\ttransition: 150ms border-color;\n\t\n\t&:hover, &:focus-within { \n\t\tborder: solid 4px color('primary', 400);\n\t\n\t\t.layout-handle {\n\t\t\topacity: 1;\n\t\t}\n\t}\n}\n\n.layout-handle {\n\topacity: 0;\n\tposition: absolute;\n\ttop: 0;\n\tright: 1rem;\n\ttransition: 150ms opacity;\n\tdisplay: flex;\n}\n\n.rhino-button {\n\tdisplay: inline-block;\n\tbackground-color: color('primary', 400);\n\tcolor: $white;\n\tfont-weight: 800;\n\ttext-decoration: none;\n\tborder: none;\n\tpadding: 0.5rem 1rem;\n\t\n\t&:focus, &:hover {\n\t\tbackground-color: color('primary', 500);\n\t}\n}\n\n.modal-form {\n\tfieldset {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 0.5rem;\n\t\tborder: none;\n\t}\n\n\t.input {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tmin-width: 12ex;\n\t\twidth: 100%;\n\t}\n\t\n\tinput[type='text'], input[type='number'], select, textarea {\n\t\tcolor: var(--rhino-text-color);\n\t\tpadding: var(--rhino-margin-200);\n\t\tbox-shadow: 0 0 2rem #ddd;\n\t\tborder-radius: 0.5rem;\n\t\tborder-radius: map.get($border, 'radius');\n\t\tborder: none;\n\t}\n\n\tinput[type='checkbox'] {\n\t\twidth: 1em;\n\t\theight: 1em;\n\t\taccent-color: color('primary', 400);\n\t\tmargin-right: 0.5rem;\n\t}\n}\n\n#close-modal {\n\tbackground-color: unset;\n\tborder: none;\n\tdisplay: block;\n\theight: 2rem;\n\tpadding: 0.4rem;\n\tcolor: currentColor;\n\n\tsvg {\n\t\tfill: currentColor;\n\t\tdisplay: block;\n\t\twidth: auto;\n\t\theight: 1rem;\n\t}\n}\n\n.modal {\n\tposition: fixed;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n\tbackground-color: rgb(255 255 255);\n\tmin-width: 42rem;\n\tmax-width: 100vw;\n\tresize: both;\n\toverflow: auto;\n\tborder-radius: 0.25rem;\n\tborder: none;\n\n\t&::backdrop {\n\t\tbackground-color: rgba(0 0 0 / 0.5);\n\t}\n\n\t&-header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\tbackground-color: black;\n\t\tcolor: #FFF;\n\t\tpadding-left: 0.5rem;\n\t\tfont-weight: 600;\n\n\t\t& > * {\n\t\t\tmargin-bottom: 0;\n\t\t}\n\t}\n\n\t&-main {\n\t\tpadding: 1rem;\n\t\tjustify-self: stretch;\n\t\talign-self: stretch;\n\t}\n\n\t&-form {\n\t\tlegend {\n\t\t\tdisplay: none;\n\t\t}\n\n\t\tdisplay: grid;\n\t\tgap: 2rem;\n\t}\n}"]}