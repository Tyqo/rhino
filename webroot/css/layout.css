/**
 * _settings.scss
 *
 * Use Sass variables and custom properties as appropriate, both are possible
 */
/**********
 * Border *
 **********/
/********
 * Typo *
 ********/
/************
 * Measures *
 ************/
/********************
 * Options/Switches *
 ********************/
/********************
 * Options/Switches *
 ********************/
/*****************
 *  Breakpoints  *
 *****************/
/**
 * src/css/mixins/_utils.scss
 *
 * Utility mixins and functions
 *
 * @author Johannes Braun <j.braun@agentur-halma.de>
 * @package libhalma
 */
/**
 * strip-unit
 *
 * Returns the unitless number
 * From: https://css-tricks.com/snippets/sass/strip-unit-function/
 *
 * @param number
 * @return number
 */
/**
 * pow
 *
 * Return the number risen to the power of n
 * From: https://css-tricks.com/snippets/sass/power-function/
 *
 * @param number 	The operator
 * @param exp 		The exponent
 * @return number
 */
/**
 * Calculates the sRGB luma of a colour.
 *
 * From: https://lnikki.la/articles/sass-better-colour-based-on-brightness/
 *
 * Math nicked from a great Thoughtbot article by Reda Lemeden:
 * http://robots.thoughtbot.com/closer-look-color-lightness
 */
/*
 * Picks a colour from two options based on which one is more visible
 * on the given background colour.
 *
 * From: https://lnikki.la/articles/sass-better-colour-based-on-brightness/
 *
 * Usage: color-for-bg($bg-color, $color-1, $color-2)
 */
/*
 * @author Carsten Coull <c.coull@agentur-halma.de>
 *
 * Slope Utilits
 * sets a Graph to use for unit
 *
 * Needs a calc support
 */
/*
 * for fluid type to fit to screen;
 */
/*
 * Sets a fluid Unit between to Values
 *
 * $min-size: Minimum Value
 * $max-size: Maximum Value
 * $min-view: Size at which to use $min-size
 * $max-view: Size at which to use $max-size
 *
 * works best with px Unit
 */
/* Can be used with Custom Proporties */
/**
 * libhalma/_rwd.scss
 *
 * Breakpoints, media queries, responsive webdesign
 * See: https://medium.freecodecamp.org/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862
 *
 * @usage: @include for-size(tablet-landscape-up) { ... }
 *				 Use a pre devined size from $breakpoints with added '-up' or '-down' for direction.
 *
 * 				 @include for-size(1200px, up) { ... }
 *				 If second parameter is 'up' or 'down' it will be used as direction and a custom size can be used.
 *
 *
 * @author Johannes Braun <j.braun@agentur-halma.de>, Carsten Coull <c.coull@agebtur-halma.de>
 * @package libhalma
 */
/**
 * src/css/libhalma/_vertical_rhythm.scss
 *
 * @author Carsten Coull <c.coull@agentur-halma.de>
 * @package libhalma
 */
body {
  position: relative;
}

.debug-base-line-grid {
  background-image: linear-gradient(to bottom, transparent 0, transparent calc(1.5rem), rgba(255, 99, 71, 0.1) calc(1.5rem), rgba(255, 99, 71, 0.1));
  background-size: 100% 3rem;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  pointer-events: none;
  z-index: 32766;
  top: -16px;
}

/**
 * src/css/libhalma/_classes.scss
 *
 * Predefined utility classes
 *
 * @author C.Coull <c.coull@agentur-halma.de>
 * @author J. Braun <j.braun@agentur-halma.de>
 * @package libhalma
 * @version 2021-05-27
 */
/**
 * The Stack
 *
 * Spacing for vertically stacked blocks
 */
/**
 * From: EveryLayout
 */
/**
 * The Cluster
 *
 * https://every-layout.dev/demos/cluster-ctas/
 *
 * We can use `gap` now on flexbox items, so it gets really easy now :-)
 */
:root {
  --primary-50: #e5faf4;
  --primary-100: #bff3e3;
  --primary-200: #98ebd2;
  --primary-300: #72e4c2;
  --primary-400: #4bddb1;
  --primary: #4bddb1;
  --primary-500: #26c595;
  --primary-600: #21ab82;
  --primary-700: #1d9a75;
  --primary-800: #1a8968;
  --primary-900: #156f54;
  --secondary-50: #d8f0f8;
  --secondary-100: #b2e2f0;
  --secondary-200: #8dd2e8;
  --secondary-300: #68c3df;
  --secondary-400: #43b3d6;
  --secondary: #43b3d6;
  --secondary-500: #2a92b2;
  --secondary-600: #267d97;
  --secondary-700: #246e84;
  --secondary-800: #235f71;
  --secondary-900: #1d4a58;
  --background-50: #b7bdc8;
  --background-100: #9da5b4;
  --background-200: #838da0;
  --background-300: #6a768b;
  --background-400: #566071;
  --background: #566071;
  --background-500: #3c424e;
  --background-600: #2e343d;
  --background-700: #262a31;
  --background-800: #1d2026;
  --background-900: #0f1114;
  --neutral-50: #f4f4f5;
  --neutral-100: #dcdce0;
  --neutral-200: #c4c5ca;
  --neutral-300: #acadb4;
  --neutral-400: #94959e;
  --neutral: #94959e;
  --neutral-500: #747581;
  --neutral-600: #666770;
  --neutral-700: #5c5d66;
  --neutral-800: #52535b;
  --neutral-900: #44444b;
  --warning-50: #faf5e4;
  --warning-100: #f4e6bd;
  --warning-200: #efd994;
  --warning-300: #ebcb6a;
  --warning-400: #e7be40;
  --warning: #e7be40;
  --warning-500: #d5a515;
  --warning-600: #bd920e;
  --warning-700: #af8607;
  --warning-800: #a27a00;
  --warning-900: #846300;
  --error-50: #f3dfde;
  --error-100: #e8bdbc;
  --error-200: #de9a98;
  --error-300: #d47674;
  --error-400: #cc514e;
  --error: #cc514e;
  --error-500: #b0302d;
  --error-600: #9b2623;
  --error-700: #901d1a;
  --error-800: #841411;
  --error-900: #6d0c0a;
  --success-50: #b9e2bb;
  --success-100: #99d49b;
  --success-200: #78c77c;
  --success-300: #58b95c;
  --success-400: #43a047;
  --success: #43a047;
  --success-500: #317534;
  --success-600: #285f2a;
  --success-700: #225124;
  --success-800: #1c431e;
  --success-900: #132d14;
  --white: #fff;
  --black: #0C0E26;
}

/**
 * src/css/libhalma/_libhalma.scss
 *
 * Libhalma: A simple, solid and accessible basic library for css
 *
 * @author Johannes Braun <j.braun@agentur-halma.de>
 * @package libhalma
 * @version 2020-11-09
 */
body {
  padding-top: 2rem;
}

.layout-menu {
  background-color: grey;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  z-index: 200;
  height: 2rem;
  padding: 0 1rem;
}
.layout-menu__button {
  display: inline-block;
  background-color: #4bddb1;
  font-weight: 800;
  color: #fff;
  text-decoration: none;
  border: none;
  padding: 0 1rem;
}
.layout-menu__button:focus, .layout-menu__button:hover {
  background-color: #26c595;
}
.layout-menu__button + * {
  margin-left: auto;
}
.layout-menu > * > * {
  margin-bottom: 0;
}

.layout-element {
  position: relative;
  border: solid 4px transparent;
  margin-top: -4px;
  margin-bottom: -4px;
  transition: 150ms border-color;
}
.layout-element:hover, .layout-element:focus-within {
  border: solid 4px #4bddb1;
}
.layout-element:hover .layout-handle, .layout-element:focus-within .layout-handle {
  opacity: 1;
}
.layout-element .ce-block__content, .layout-element .ce-toolbar__content {
  max-width: 100%;
}

.layout-handle {
  opacity: 0;
  position: absolute;
  top: 0;
  right: 1rem;
  left: 1rem;
  transition: 150ms opacity;
  display: flex;
  gap: 2rem;
  justify-content: space-between;
}
.layout-handle__actions :first-child {
  border-bottom-left-radius: 0.5rem;
}
.layout-handle__actions :last-child {
  border-bottom-right-radius: 0.5rem;
}

.rhino-button {
  display: inline-block;
  background-color: #4bddb1;
  color: #fff;
  font-weight: 800;
  text-decoration: none;
  border: none;
  padding: 0.5rem 1rem;
}
.rhino-button:focus, .rhino-button:hover {
  background-color: #26c595;
}

.rhino-select {
  display: inline-block;
  color: #5c5d66;
  font-weight: 600;
  -webkit-appearance: none;
          appearance: none;
  padding-right: 2rem;
  padding-left: 0.5rem;
  padding-block: 0rem;
  text-decoration: none;
  border: #4bddb1 solid 0.5rem;
  border-radius: 0 0 0.5rem 0.5rem;
  --icon-chevron: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(92, 93, 102)' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
  background-image: var(--icon-chevron);
  background-position: center right 0.75rem;
  background-size: 1rem auto;
  background-repeat: no-repeat;
}

.modal-form fieldset {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  border: none;
}
.modal-form .input {
  display: flex;
  flex-direction: column;
  min-width: 12ex;
  width: 100%;
}
.modal-form input[type=text], .modal-form input[type=number], .modal-form select, .modal-form textarea {
  color: var(--rhino-text-color);
  padding: var(--rhino-margin-200);
  box-shadow: 0 0 2rem #ddd;
  border-radius: 0.5rem;
  border-radius: 4px;
  border: none;
}
.modal-form input[type=checkbox] {
  width: 1em;
  height: 1em;
  accent-color: #4bddb1;
  margin-right: 0.5rem;
}

#close-modal {
  background-color: unset;
  border: none;
  display: block;
  height: 2rem;
  padding: 0.4rem;
  color: currentColor;
}
#close-modal svg {
  fill: currentColor;
  display: block;
  width: auto;
  height: 1rem;
}

.modal {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: rgb(255, 255, 255);
  min-width: 42rem;
  max-width: 100vw;
  resize: both;
  overflow: auto;
  border-radius: 0.25rem;
  border: none;
}
.modal::backdrop {
  background-color: rgba(0, 0, 0, 0.5);
}
.modal-header {
  display: flex;
  justify-content: space-between;
  background-color: black;
  color: #FFF;
  padding-left: 0.5rem;
  font-weight: 600;
}
.modal-header > * {
  margin-bottom: 0;
}
.modal-main {
  padding: 1rem;
  justify-self: stretch;
  align-self: stretch;
}
.modal-form {
  display: grid;
  gap: 2rem;
}
.modal-form legend {
  display: none;
}
/*# sourceMappingURL=layout.css.map */