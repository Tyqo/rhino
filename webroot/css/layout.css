/**
 * _settings.scss
 *
 * Use Sass variables and custom properties as appropriate, both are possible
 */
/**********
 * Colors *
 **********/
/********
 * Typo *
 ********/
/************
 * Measures *
 ************/
/********************
 * Options/Switches *
 ********************/
/*****************
 *  Breakpoints  *
 *****************/
/**
 * src/css/libhalma/_classes.scss
 *
 * Predefined utility classes
 *
 * @author C.Coull <c.coull@agentur-halma.de>
 * @author J. Braun <j.braun@agentur-halma.de>
 * @package libhalma
 * @version 2021-05-27
 */
/**
 * src/css/libhalma/media-object.scss
 *
 * @author Johannes Braun <j.braun@agentur-halma.de>
 * @package libhalma
 * @version 2021-05-31
 */
/**
 * src/css/libhalma/_vertical_rhythm.scss
 *
 * @author Carsten Coull <c.coull@agentur-halma.de>
 * @package libhalma
 */
body {
  position: relative;
}

.debug-base-line-grid {
  background-image: linear-gradient(to bottom, transparent 0, transparent calc(1.55rem), rgba(255, 99, 71, 0.1) calc(1.55rem), rgba(255, 99, 71, 0.1));
  background-size: 100% 3.1rem;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  pointer-events: none;
  z-index: 32766;
  top: -16px;
}

/**
 * libhalma/_rwd.scss
 *
 * Breakpoints, media queries, responsive webdesign
 * See: https://medium.freecodecamp.org/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862
 *
 * @usage: @include for-size(tablet-landscape-up) { ... }
 *				 Use a pre devined size from $breakpoints with added '-up' or '-down' for direction.
 *
 * 				 @include for-size(1200px, up) { ... }
 *				 If second parameter is 'up' or 'down' it will be used as direction and a custom size can be used.
 *
 *
 * @author Johannes Braun <j.braun@agentur-halma.de>, Carsten Coull <c.coull@agebtur-halma.de>
 * @package libhalma
 */
/**
 * src/css/mixins/_utils.scss
 *
 * Utility mixins and functions
 *
 * @author Johannes Braun <j.braun@agentur-halma.de>
 * @package libhalma
 */
/**
 * strip-unit
 *
 * Returns the unitless number
 * From: https://css-tricks.com/snippets/sass/strip-unit-function/
 *
 * @param number
 * @return number
 */
/**
 * pow
 *
 * Return the number risen to the power of n
 * From: https://css-tricks.com/snippets/sass/power-function/
 *
 * @param number 	The operator
 * @param exp 		The exponent
 * @return number
 */
/**
 * Calculates the sRGB luma of a colour.
 *
 * From: https://lnikki.la/articles/sass-better-colour-based-on-brightness/
 *
 * Math nicked from a great Thoughtbot article by Reda Lemeden:
 * http://robots.thoughtbot.com/closer-look-color-lightness
 */
/*
 * Picks a colour from two options based on which one is more visible
 * on the given background colour.
 *
 * From: https://lnikki.la/articles/sass-better-colour-based-on-brightness/
 *
 * Usage: color-for-bg($bg-color, $color-1, $color-2)
 */
/*
 * @author Carsten Coull <c.coull@agentur-halma.de>
 *
 * Slope Utilits
 * sets a Graph to use for unit
 *
 * Needs a calc support
 */
/*
 * for fluid type to fit to screen;
 */
/*
 * Sets a fluid Unit between to Values
 *
 * $min-size: Minimum Value
 * $max-size: Maximum Value
 * $min-view: Size at which to use $min-size
 * $max-view: Size at which to use $max-size
 *
 * works best with px Unit
 */
/* Can be used with Custom Proporties */
/**
 * _ui.scss
 *
 * @author Johannes Braun <j.braun@agentur-halma.de>
 * @package libhalma
 */
/**
 * Reset button
 * See: https://fvsch.com/styling-buttons/
 */
/**
 * The Stack
 *
 * Spacing for vertically stacked blocks
 */
/**
 * From: EveryLayout
 */
/**
 * The Cluster
 *
 * https://every-layout.dev/demos/cluster-ctas/
 *
 * We can use `gap` now on flexbox items, so it gets really easy now :-)
 */
/**
 * src/css/libhalma/_libhalma.scss
 *
 * Libhalma: A simple, solid and accessible basic library for css
 *
 * @author Johannes Braun <j.braun@agentur-halma.de>
 * @package libhalma
 * @version 2020-11-09
 */
:root {
  --rhino-primary-color: #4ADCB1;
  --rhino-primary-color-100: white;
  --rhino-primary-color-200: #b5f1df;
  --rhino-primary-color-300: #75e4c3;
  --rhino-primary-color-400: #4ADCB1;
  --rhino-primary-color-500: #27cc9b;
  --rhino-primary-color-600: #1fa17b;
  --rhino-primary-color-700: #17765a;
  --rhino-primary-color-800: #0f4b3a;
  --rhino-primary-color-900: black;
  --rhino-secondary-color: #c2c1bf;
  --rhino-secondary-color-100: white;
  --rhino-secondary-color-200: white;
  --rhino-secondary-color-300: #dbdad9;
  --rhino-secondary-color-400: #c2c1bf;
  --rhino-secondary-color-500: #a9a8a5;
  --rhino-secondary-color-600: #908e8b;
  --rhino-secondary-color-700: #777571;
  --rhino-secondary-color-800: #5d5b58;
  --rhino-secondary-color-900: #282827;
  --rhino-background-color: #0c0e26;
  --rhino-background-color-100: #777ed4;
  --rhino-background-color-200: #2b3287;
  --rhino-background-color-300: #181c4d;
  --rhino-background-color-400: #0c0e26;
  --rhino-background-color-500: black;
  --rhino-background-color-600: black;
  --rhino-background-color-700: black;
  --rhino-background-color-800: black;
  --rhino-background-color-900: black;
  --rhino-contrast-color: #F9F9F9;
  --rhino-contrast-color-100: white;
  --rhino-contrast-color-200: white;
  --rhino-contrast-color-300: white;
  --rhino-contrast-color-400: #F9F9F9;
  --rhino-contrast-color-500: #e0e0e0;
  --rhino-contrast-color-600: #c6c6c6;
  --rhino-contrast-color-700: #adadad;
  --rhino-contrast-color-800: #939393;
  --rhino-contrast-color-900: #606060;
  --rhino-text-color: #0c0e26;
  --rhino-text-color-100: #777ed4;
  --rhino-text-color-200: #2b3287;
  --rhino-text-color-300: #181c4d;
  --rhino-text-color-400: #0c0e26;
  --rhino-text-color-500: black;
  --rhino-text-color-600: black;
  --rhino-text-color-700: black;
  --rhino-text-color-800: black;
  --rhino-text-color-900: black;
  --rhino-primary: var(--rhino-primary-color) !important;
  --rhino-primary-hover: var(--rhino-primary-color-500) !important;
  --rhino-primary-focus: var(--rhino-primary-color-200) !important;
  --rhino-margin: 2rem;
  --rhino-margin-100: 0.25rem;
  --rhino-margin-200: 0.5rem;
  --rhino-margin-300: 1rem;
  --rhino-margin-400: 2rem;
  --rhino-margin-500: 4rem;
  --rhino-margin-600: 6rem;
  --rhino-margin-700: 8rem;
  --rhino-margin-800: 10rem;
  --rhino-margin-900: 14rem;
  --rhino-border-width: 2px;
  --rhino-border-radius: 0.5rem;
  --rhino-border-color: currentColor;
  --rhino-border-type: solid;
  --rhino-border: var(--rhino-border-color) var(--rhino-border-width) var(--rhino-border-type) var(--rhino-border-radius);
  --rhino-gutter: 1rem;
  --rhino-vertical-unit: 1.55rem;
  --rhino-outer-bound: 2rem;
  --rhino-inner-bound-width: 52rem;
  --rhino-outer-bound-width: 64rem;
  --rhino-header-height: clamp(5rem, (100vw * 0.0076923077) - -4.8461538462rem, 6.5rem);
  --rhino-screen-height: 100vh;
}

.margin--rhino- {
  margin-bottom: var(--rhino-margin);
}

.margin--rhino-100 {
  margin-bottom: var(--rhino-margin-100);
}

.margin-bottom--rhino-100 {
  margin-bottom: var(--rhino-margin-100);
}

.margin-top--rhino-100 {
  margin-top: var(--rhino-margin-100);
}

.gap--rhino-100 {
  gap: var(--rhino-margin-100);
}

.stack--rhino-100 > * + * {
  margin-top: var(--rhino-margin-100);
}

.margin--rhino-200 {
  margin-bottom: var(--rhino-margin-200);
}

.margin-bottom--rhino-200 {
  margin-bottom: var(--rhino-margin-200);
}

.margin-top--rhino-200 {
  margin-top: var(--rhino-margin-200);
}

.gap--rhino-200 {
  gap: var(--rhino-margin-200);
}

.stack--rhino-200 > * + * {
  margin-top: var(--rhino-margin-200);
}

.margin--rhino-300 {
  margin-bottom: var(--rhino-margin-300);
}

.margin-bottom--rhino-300 {
  margin-bottom: var(--rhino-margin-300);
}

.margin-top--rhino-300 {
  margin-top: var(--rhino-margin-300);
}

.gap--rhino-300 {
  gap: var(--rhino-margin-300);
}

.stack--rhino-300 > * + * {
  margin-top: var(--rhino-margin-300);
}

.margin--rhino-400 {
  margin-bottom: var(--rhino-margin-400);
}

.margin-bottom--rhino-400 {
  margin-bottom: var(--rhino-margin-400);
}

.margin-top--rhino-400 {
  margin-top: var(--rhino-margin-400);
}

.gap--rhino-400 {
  gap: var(--rhino-margin-400);
}

.stack--rhino-400 > * + * {
  margin-top: var(--rhino-margin-400);
}

.margin--rhino-500 {
  margin-bottom: var(--rhino-margin-500);
}

.margin-bottom--rhino-500 {
  margin-bottom: var(--rhino-margin-500);
}

.margin-top--rhino-500 {
  margin-top: var(--rhino-margin-500);
}

.gap--rhino-500 {
  gap: var(--rhino-margin-500);
}

.stack--rhino-500 > * + * {
  margin-top: var(--rhino-margin-500);
}

.margin--rhino-600 {
  margin-bottom: var(--rhino-margin-600);
}

.margin-bottom--rhino-600 {
  margin-bottom: var(--rhino-margin-600);
}

.margin-top--rhino-600 {
  margin-top: var(--rhino-margin-600);
}

.gap--rhino-600 {
  gap: var(--rhino-margin-600);
}

.stack--rhino-600 > * + * {
  margin-top: var(--rhino-margin-600);
}

.margin--rhino-700 {
  margin-bottom: var(--rhino-margin-700);
}

.margin-bottom--rhino-700 {
  margin-bottom: var(--rhino-margin-700);
}

.margin-top--rhino-700 {
  margin-top: var(--rhino-margin-700);
}

.gap--rhino-700 {
  gap: var(--rhino-margin-700);
}

.stack--rhino-700 > * + * {
  margin-top: var(--rhino-margin-700);
}

.margin--rhino-800 {
  margin-bottom: var(--rhino-margin-800);
}

.margin-bottom--rhino-800 {
  margin-bottom: var(--rhino-margin-800);
}

.margin-top--rhino-800 {
  margin-top: var(--rhino-margin-800);
}

.gap--rhino-800 {
  gap: var(--rhino-margin-800);
}

.stack--rhino-800 > * + * {
  margin-top: var(--rhino-margin-800);
}

.margin--rhino-900 {
  margin-bottom: var(--rhino-margin-900);
}

.margin-bottom--rhino-900 {
  margin-bottom: var(--rhino-margin-900);
}

.margin-top--rhino-900 {
  margin-top: var(--rhino-margin-900);
}

.gap--rhino-900 {
  gap: var(--rhino-margin-900);
}

.stack--rhino-900 > * + * {
  margin-top: var(--rhino-margin-900);
}

#close-modal {
  background-color: unset;
  border: none;
  display: block;
  height: 2rem;
  padding: 0.4rem;
  color: currentColor;
}
#close-modal svg {
  fill: currentColor;
  display: block;
  width: auto;
  height: 1rem;
}

.modal {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: rgb(255, 255, 255);
  min-width: 42rem;
  max-width: 100vw;
  resize: both;
  overflow: auto;
  border-radius: 0.25rem;
  border: none;
}
.modal::backdrop {
  background-color: rgba(0, 0, 0, 0.5);
}
.modal-header {
  display: flex;
  justify-content: space-between;
  background-color: black;
  color: #FFF;
  padding-left: 0.5rem;
  font-weight: 600;
}
.modal-main {
  padding: 1rem;
  justify-self: stretch;
  align-self: stretch;
}
.modal-form {
  display: grid;
  gap: 2rem;
}
.modal-form legend {
  display: none;
}

a, button, input, select, textarea {
  font: inherit;
  cursor: pointer;
  color: inherit;
}
a:focus, button:focus, input:focus, select:focus, textarea:focus {
  outline: none;
}

[disabled] {
  opacity: 0.6;
  pointer-events: none;
  cursor: default;
}

input[type=text], textarea {
  cursor: text;
}

input, textarea, select, input[type=file], input[input] {
  background-color: var(--rhino-contrast-color);
  color: var(--rhino-text-color);
  border: var(--rhino-border-width) var(--rhino-border-type) var(--rhino-border-color);
  border-radius: var(--rhino-border-radius);
  font-size: 1rem;
  line-height: 1.55em;
  margin-bottom: 0rem;
  --form-element-spacing-vertical: 0.25em;
  --form-element-spacing-horizontal: 0.25em;
  padding: var(--form-element-spacing-vertical) var(--form-element-spacing-horizontal);
}
input[readonly], textarea[readonly], select[readonly], input[type=file][readonly], input[input][readonly] {
  cursor: not-allowed;
  opacity: 0.5;
}

input[type=checkbox] {
  width: auto;
  display: inline-block;
}

label {
  font-weight: 600;
}

.input {
  display: flex;
  flex-direction: column;
  min-width: 32ex;
  width: -moz-fit-content;
  width: fit-content;
  align-items: flex-start;
  gap: 0.25rem;
}

.checkbox label {
  display: flex;
  justify-content: center;
  align-items: center;
}
.checkbox label input {
  margin-right: var(--rhino-margin-200);
}

.button, .button-container a, button {
  padding: 0;
  border: none;
  font: inherit;
  color: inherit;
  background-color: transparent;
  cursor: pointer;
  padding: var(--rhino-margin-100) var(--rhino-margin-300);
  color: var(--rhino-contrast-color);
  background-color: var(--rhino-primary-color);
  text-align: center;
  text-decoration: none;
  border-width: var(--rhino-border-width);
  border-style: solid;
  border-color: var(--rhino-primary-color);
  border-radius: calc(var(--rhino-border-radius) * 0.5);
  outline: none;
  display: inline-flex;
  align-items: baseline;
  font-weight: 600;
}
.button::-moz-focus-inner, .button-container a::-moz-focus-inner, button::-moz-focus-inner {
  border: none;
}
.button:active, .button-container a:active, button:active {
  transform: translateY(1px);
  filter: saturate(150%);
}
.button:hover, .button-container a:hover, .button:focus, .button-container a:focus, button:hover, button:focus {
  background-color: transparent;
  color: var(--rhino-primary-color);
  border-color: var(--rhino-primary-color);
}
.button > span + span, .button-container a > span + span, button > span + span {
  margin-left: 0.5ch;
}

.button-reset {
  padding: 0;
  border: none;
  font: inherit;
  color: inherit;
  background-color: transparent;
  cursor: pointer;
}

.icon-button {
  height: 2.7em;
  display: flex;
  gap: var(--rhino-margin-200);
  justify-content: center;
  align-items: center;
}
.icon-button * {
  display: inline-block;
}

.alt-button, .alt-button-container a {
  padding: 0;
  border: none;
  font: inherit;
  color: inherit;
  background-color: transparent;
  cursor: pointer;
  padding: var(--rhino-margin-100) var(--rhino-margin-300);
  color: var(--rhino-contrast-color);
  background-color: var(--rhino-secondary-color);
  text-align: center;
  text-decoration: none;
  border-width: var(--rhino-border-width);
  border-style: solid;
  border-color: var(--rhino-secondary-color);
  border-radius: calc(var(--rhino-border-radius) * 0.5);
  outline: none;
  display: inline-flex;
  align-items: baseline;
  font-weight: 600;
}
.alt-button::-moz-focus-inner, .alt-button-container a::-moz-focus-inner {
  border: none;
}
.alt-button:active, .alt-button-container a:active {
  transform: translateY(1px);
  filter: saturate(150%);
}
.alt-button:hover, .alt-button-container a:hover, .alt-button:focus, .alt-button-container a:focus {
  background-color: transparent;
  color: var(--rhino-secondary-color);
  border-color: var(--rhino-secondary-color);
}
.alt-button > span + span, .alt-button-container a > span + span {
  margin-left: 0.5ch;
}

.body-text a {
  color: var(--rhino-primary-color);
  font-weight: 600;
}
.body-text a:hover, .body-text a:focus {
  color: var(--rhino-primary-color-500);
}
.body-text a:focus {
  outline: 2px solid var(--rhino-primary-color-500);
  outline-offset: 2px;
}
.body-text a:active {
  color: var(--rhino-primary-color-800);
}

.skip-link {
  position: fixed;
  z-index: 200;
  top: 0;
  left: 50%;
  transform: translate(-50%, -200%);
  transition: transform 300ms ease-in-out;
}
.skip-link:focus {
  transform: translate(-50%, 0%);
}

.editor {
  box-shadow: 0 0 2rem #ddd;
  border-radius: var(--rhino-rhino-border-radius);
  padding: var(--rhino-rhino-margin-200) var(--rhino-rhino-margin-500);
  min-height: 300px;
}
.editor .codex-editor {
  height: 100%;
}

body {
  padding-top: 2rem;
}

.layout-menu {
  background-color: grey;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  z-index: 200;
  height: 2rem;
}
.layout-menu__button {
  display: inline-block;
  background-color: var(--rhino-primary-color);
  color: var(--rhino-contrast-color);
  font-weight: 800;
  text-decoration: none;
  border: none;
  padding: 0 var(--rhino-margin-400);
}
.layout-menu__button:focus, .layout-menu__button:hover {
  background-color: var(--rhino-primary-color-500);
}
.layout-menu__button + * {
  margin-left: auto;
}

.layout-element {
  position: relative;
  border: solid 4px transparent;
  margin-top: -4px;
  margin-bottom: -4px;
  transition: 150ms border-color;
}
.layout-element:hover, .layout-element:focus-within {
  border: solid 4px var(--rhino-primary-color);
}
.layout-element:hover .layout-handle, .layout-element:focus-within .layout-handle {
  opacity: 1;
}

.layout-handle {
  opacity: 0;
  position: absolute;
  top: 0;
  right: 1rem;
  transition: 150ms opacity;
  display: flex;
}

.rhino-button {
  display: inline-block;
  background-color: var(--rhino-primary-color);
  color: var(--rhino-contrast-color);
  font-weight: 800;
  text-decoration: none;
  border: none;
  padding: var(--rhino-margin-200) var(--rhino-margin-400);
}
.rhino-button:focus, .rhino-button:hover {
  background-color: var(--rhino-primary-color-500);
}

.modal-form fieldset {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  border: none;
}
.modal-form .input {
  display: flex;
  flex-direction: column;
  min-width: 12ex;
  width: 100%;
}
.modal-form input[type=text], .modal-form input[type=number], .modal-form select, .modal-form textarea {
  color: var(--rhino-text-color);
  padding: var(--rhino-margin-200);
  box-shadow: 0 0 2rem #ddd;
  border-radius: 0.5rem;
  border-radius: var(--rhino-border-radius);
  border: none;
}
.modal-form input[type=checkbox] {
  width: 1em;
  height: 1em;
  accent-color: var(--rhino-primary-color);
  margin-right: 0.5rem;
}
/*# sourceMappingURL=layout.css.map */